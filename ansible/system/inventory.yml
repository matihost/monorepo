---
all:
  children:
    local:
      hosts:
        localhost:
      vars:
        versions:
          # represents path to local gems, see: 'gem environment' output for example:  ~/.gem/ruby/3.1.0/bin
          ruby: 3.2.0
          kubernetes: v1.31
          crio: v1.30
          # TODO change to {{ ansible_distribution_version }} when noble/24.04 is supported Ubuntu
          # List of supported Ubuntu versions:
          # https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos#DebianUbuntu:UsingOpenVPNaptrepositories
          openvpn_repo_ubuntu_version: "lunar"
          # List of supported Ubuntu versions: https://www.hashicorp.com/official-packaging-guide?product_intent=terraform
          terraform_ubuntu_version: "noble"
          virtualbox_ubuntu_version: "noble"
          # TODO change to {{ ansible_distribution_release }} when noble/24.04 is supported Ubuntu
          cri_dockerd_ubuntu_version: "jammy"
          # MQ Version available at: https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqdev/redist/
          mq: 9.4.0.0
          # List of supported Ubuntu versions: https://download.opensuse.org/repositories/home:/npreining:/debian-ubuntu-onedrive
          onedrive_ubuntu_version: "24.04"
          # List of supported Ubuntu versions: https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/
          pgadmin_ubuntu_version: "noble"
          # List of supported Ubuntu versions: https://apt.envoyproxy.io/
          envoy_ubuntu_version: "jammy"
        virtual_interface_ip: 192.168.10.1
        update_cache_timeout: 30
        systemd_journal:
          max_size: 1G
          max_duration: 10days
        vs_code_extensions: |
          4ops.packer
          4ops.terraform
          amazonwebservices.aws-toolkit-vscode
          asciidoctor.asciidoctor-vscode
          batisteo.vscode-django
          charliermarsh.ruff
          davidanson.vscode-markdownlint
          donjayamanne.githistory
          donjayamanne.python-environment-manager
          donjayamanne.python-extension-pack
          dotenv.dotenv-vscode
          dotjoshjohnson.xml
          eamodio.gitlens
          esbenp.prettier-vscode
          formulahendry.code-runner
          foxundermoon.shell-format
          garytyler.darcula-pycharm
          george-alisson.html-preview-vscode
          github.vscode-github-actions
          github.vscode-pull-request-github
          golang.go
          hashicorp.terraform
          jebbs.plantuml
          kevinrose.vsc-python-indent
          magicstack.magicpython
          moshfeu.compare-folders
          ms-azuretools.vscode-docker
          ms-kubernetes-tools.vscode-kubernetes-tools
          ms-python.debugpy
          ms-python.isort
          ms-python.python
          ms-python.vscode-pylance
          ms-toolsai.jupyter
          ms-toolsai.jupyter-keymap
          ms-toolsai.jupyter-renderers
          ms-toolsai.vscode-jupyter-cell-tags
          ms-toolsai.vscode-jupyter-slideshow
          ms-vscode-remote.remote-containers
          ms-vscode.makefile-tools
          njpwerner.autodocstring
          redhat.fabric8-analytics
          redhat.java
          redhat.vscode-commons
          redhat.vscode-yaml
          samuelcolvin.jinjahtml
          scala-lang.scala
          streetsidesoftware.code-spell-checker
          streetsidesoftware.code-spell-checker-polish
          techer.open-in-browser
          tomoki1207.pdf
          visualstudioexptteam.intellicode-api-usage-examples
          visualstudioexptteam.vscodeintellicode
          vmware.vscode-spring-boot
          vscjava.vscode-gradle
          vscjava.vscode-java-debug
          vscjava.vscode-java-dependency
          vscjava.vscode-java-pack
          vscjava.vscode-java-test
          vscjava.vscode-lombok
          vscjava.vscode-maven
          vscjava.vscode-spring-boot-dashboard
          vscjava.vscode-spring-initializr
          vue.volar
          wholroyd.jinja
          yzhang.markdown-all-in-one
        repositories:
        - name: universe
        - name: multiverse
        - name: pgadmin
          repo: "deb [arch=amd64] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/{{ versions.pgadmin_ubuntu_version }} pgadmin4 main"
          key_url: "https://www.pgadmin.org/static/packages_pgadmin_org.pub"
        - name: vscode
          repo: "deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main"
          key_url: "https://packages.microsoft.com/keys/microsoft.asc"
        - name: azure-cli
          repo: "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ noble main"
        - name: google-chrome
          repo: "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main"
          key_url: https://dl.google.com/linux/linux_signing_key.pub
        - name: virtualbox
          repo: >-
            deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian {{ versions.virtualbox_ubuntu_version }} contrib
          key_url:
          - https://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc
          - https://download.virtualbox.org/virtualbox/debian/oracle_vbox_2016.asc
        - name: kubernetes
          repo: >-
            deb [arch=amd64] https://pkgs.k8s.io/core:/stable:/{{ versions.kubernetes }}/deb/ /
          key_url: >-
            https://pkgs.k8s.io/core:/stable:/{{ versions.kubernetes }}/deb/Release.key
        - name: crio
          repo: >-
            deb [arch=amd64] https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ versions.crio}}/deb/ /
          key_url: >-
            https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ versions.crio}}/deb/Release.key
        - name: google-cloud-sdk
          repo: "deb [arch=amd64] https://packages.cloud.google.com/apt cloud-sdk main"
          key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          key_format: asc
        # - name: openvpn
        #   repo: "deb [arch=amd64] https://swupdate.openvpn.net/community/openvpn3/repos {{ versions.openvpn_repo_ubuntu_version }} main"
        #   key_url: https://swupdate.openvpn.net/repos/openvpn-repo-pkg-key.pub
        - name: terraform
          repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ versions.terraform_ubuntu_version }} main"
          key_url: https://apt.releases.hashicorp.com/gpg
          key_format: asc
        - name: envoy
          repo: "deb [arch=amd64] https://apt.envoyproxy.io {{ versions.envoy_ubuntu_version }} main"
          key_url: ["https://apt.envoyproxy.io/signing.key"]
        - name: github
          repo: "deb [arch=amd64] https://cli.github.com/packages stable main"
          key_url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
          key_format: gpg
        - name: onedrive
          repo: "deb [arch=amd64] https://download.opensuse.org/repositories/home:/npreining:/debian-ubuntu-onedrive/xUbuntu_{{ versions.onedrive_ubuntu_version }}/ ./"
          key_url: https://download.opensuse.org/repositories/home:/npreining:/debian-ubuntu-onedrive/xUbuntu_{{ versions.onedrive_ubuntu_version }}/Release.key
        - name: jenkins
          repo: "deb [arch=amd64] https://pkg.jenkins.io/debian-stable binary/"
          key_url: "https://pkg.jenkins.io/debian/jenkins.io-2023.key"
        - name: dbeaver
          repo: "deb [arch=amd64] https://dbeaver.io/debs/dbeaver-ce /"
          key_url: "https://dbeaver.io/debs/dbeaver.gpg.key"
        packages:
        - neofetch
        - mc
        - lm-sensors
        - psensor
        - inotify-tools
        - brasero
        - autofs
        - bind9
        - cifs-utils
        - dlocate
        - plocate
        - ubuntu-restricted-extras
        - gnome-shell-extensions
        - gnome-tweaks
        - hplip
        - hplip-gui
        - ddclient
        - golang-go
        - golang-golang-x-tools
        - python3-pip
        - graphviz
        - ruby
        - openjdk-17-jdk
        - openjdk-17-source
        - openjdk-21-jdk
        - openjdk-21-source
        - dos2unix
        - guake
        - mono-complete
        - jq
        - curl
        - keepass2
        - code
        - onedrive
        - nautilus-dropbox
        - ffmpeg
        - openssh-server
        - iftop
        - dosbox
        #- libva-x11-2 # it is steam app dependency
        - virt-manager
        - docker.io
        - docker-buildx
        - conntrack
        - fuse-overlayfs
        # When SecureBoot is enabled - VirtualBox vboxdrv module needs to be signed:
        # https://askubuntu.com/a/1199583
        # in order for VirtualBox to run you need to recompile kernel module
        # and sign for UEFI Secure Boot:
        # Run:
        # sudo /sbin/vboxconfig
        #
        - virtualbox-7.0 # Virtual Box from Oracle repo,
        # - virtualbox # Ubuntu packaged VirtualBox
        - containernetworking-plugins
        - kubelet
        - kubeadm
        - kubectl
        - cri-o
        - podman
        - buildah
        - skopeo
        # - terraform # OpenTofu is used instead
        - packer
        - vagrant
        - sshpass
        - notepadqq
        - certbot
        - google-chrome-stable
        - google-cloud-sdk
        - google-cloud-sdk-gke-gcloud-auth-plugin
        - google-cloud-sdk-cloud-build-local
        - google-cloud-sdk-kpt
        - envoy
        # - jenkins
        # requirement for Jetbrains Toolbox
        - libfuse2
        # Skipped packages:
        # OpenVPN 3 is supported only on Ubuntu LTS: https://openvpn.net/cloud-docs/openvpn-3-client-for-linux/
        # - openvpn3
        - gh
        - npm
        - tox
        - pgadmin4-desktop
        # Python libraries should be installed via Ubuntu distro manager if possible as Ubuntu 23.04+ forces PEP668
        - python3-venv
        - python3-ansible-runner
        - python3-pip
        - python3-flake8
        - python3-flake8-docstrings
        - python3-flake8-2020
        - python3-openshift
        # Ansiblie-lint from ubuntu package stopped working
        # - ansible-lint
        - python3-requests
        - pre-commit
        - pylint
        - python3-pytest
        - pipenv
        - yamllint
        - youtubedl-gui
        - libxcb-cursor0 # calibre dependency
        - apt-transport-https
        - azure-cli
        - dbeaver-ce
        snaps:
        - mc-installer
        - notepad-plus-plus
        - steam
        # - skype
        # Uncomment to use snap packages for gcloud sdk
        # classic_snaps:
        # - google-cloud-sdk
        # - kubectl
        # use only to install python libraries which are not available as python3-xyz ubuntu packages
        # Ubuntu 23.04+ forces PEP668, the following libs are installed as --user --break-system-packages
        pips:
        - kubernetes-validate
        - "molecule[lint]"
        - "molecule[docker]"
        - awsume
        - aws-sso-util
        - ansible-lint
        clis:
        - name: virtual-network-interface
          desc: To ensure there is a virtual interface with stable IP
          become: true
          command: |
            [[ "$(nmcli -f ip4.address c s br0 2>/dev/null)" =~ {{ virtual_interface_ip }} ]] || {
              nmcli conn add type bridge con-name br0 ifname br0
              nmcli conn modify br0 ipv4.addresses '{{ virtual_interface_ip }}/24'
              nmcli conn modify br0 ipv4.gateway '{{ virtual_interface_ip }}'
              nmcli conn modify br0 ipv4.dns '{{ virtual_interface_ip }}'
              nmcli conn modify br0 ipv4.method manual
              nmcli conn modify br0 ipv4.never-default yes
              nmcli conn modify br0 connection.autoconnect yes
              nmcli conn up br0
            }
        - name: vboxuser
          desc: To ensure VirtualBox can see host USB
          become: false
          command: |
            [ "$(groups |grep -c vboxusers)" -ne 0 ] || sudo usermod -aG vboxusers ${USER}
        - name: python3-user-venv
          desc: |
            From Ubuntu 23.04+ user site packages are forbidden in favor of custom venv
            Hence it is required to create at least one venv and ensure its bin directory is last item on PATH
            So that Ubuntu distributioon python3, pip3 etc. are taken from /usr/bin/
            while all installed Python libs on virtual env are possible to be run by installing them via ~/.venv/user/bin/pip3
          become: false
          command: |
            [ -d ~/.venv/user ] || {
              python3 -m venv ~/.venv/user
              [ "$(grep -c '.venv/usr/bin' ~/.bashrc)" -gt 0 ] || {
                echo 'PATH=${PATH}:${HOME}/.venv/user/bin' >> ~/.bashrc
              }
            }
        - name: vbox-settings
          desc: To ensure VirtualBox can create any host network
          become: true
          command: |
            [ -e "/etc/vbox/networks.conf" ] || {
              mkdir -p /etc/vbox
              cat <<EOF > /etc/vbox/networks.conf
            * 0.0.0.0/0 ::/0
            EOF
              echo "/etc/vbox/networks.conf configured to allow any vbox hostnetwork"
            }
        - name: vagrant plugins
          desc: To ensure Vagrant plugins are installed
          become: false
          command: |
            [ "$(vagrant plugin list |grep -c vagrant-vbguest)" -ne 0 ] || {
              vagrant plugin install vagrant-vbguest
              vagrant plugin update
            }
        - name: git-prompt
          become: false
          command: |
            [ -d ~/.bash-git-prompt ] || {
              git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1
              echo 'GIT_PROMPT_ONLY_IN_REPO=0
              GIT_PROMPT_THEME=Single_line_Ubuntu
              source ~/.bash-git-prompt/gitprompt.sh' >> ~/.bashrc
              echo "Installed Git prompt"
            }
        - name: bash-history
          become: false
          command: |
            [ "$(grep -c HISTTIMEFORMAT ~/.bashrc)" -gt 0 ] || {
              sed -i -E "s/^HISTCONTROL=.+$/HISTCONTROL=ignoreboth:erasedups/" ~/.bashrc
              sed -i -E "s/^HISTSIZE=.+$/HISTSIZE=-1/" ~/.bashrc
              sed -i -E "s/^HISTFILESIZE=.+$/HISTFILESIZE=-1/" ~/.bashrc
              echo 'HISTTIMEFORMAT="[%F %T] "' >> ~/.bashrc
              echo "Bash history configured"
            }
        - name: azure-cli config
          become: false
          command: |
            az config get extension.use_dynamic_install 2>/dev/null >/dev/null || {
              az config set extension.dynamic_install_allow_preview=true
              az config set extension.use_dynamic_install=yes_without_prompt
              echo "Azure CLI configured"
            }
        - name: golang-bin-on-path
          desc: Ensure ~/go/bin is on PATH
          become: false
          command: |
            [ "$(grep -c 'go/bin' ~/.bashrc)" -gt 0 ] || {
              echo 'PATH=${HOME}/go/bin:${PATH}' >> ~/.bashrc
            }
        - name: ansible-community-kubernetes-collections
          desc: To ensure Ansible galaxy collection community.kubernetes with k8s, helm modules is present
          become: false
          command: |
            [ -n "$(ansible-galaxy collection list community.kubernetes --format json |jq -r '(try ..)|.version' |grep -v null)" ] || {
              ansible-galaxy collection install community.kubernetes
              echo "Ansible collection community.kubernetes has been installed"
            }
        - name: git-config
          become: false
          command: |
            [ "$(git config --global pull.rebase)" == "true" ] || {
              git config --global pull.rebase true
              git config --global push.autoSetupRemote true
              git config --global credential.helper store
              git config --global fetch.prune true
              git config --global alias.lol "log --oneline --graph --decorate --all"
            }
            ([ -n "$(git config --global user.name)" ] && [ -n "$(git config --global user.email)" ]) || {
              echo "Git user.name and user.email MUST be set"
              exit 1
            }
        - name: ensure-hp-lip
          desc: |
            Ensure the latest hplip is installed from source
            TODO the latest 3.23.8 cannot be installed on Ubuntu 23.10 out of the box yet: https://bugs.launchpad.net/hplip/+bug/1879353
            To install latest HPLIP in advanced mode (without GUI): https://developers.hp.com/hp-linux-imaging-and-printing/KnowledgeBase/InstallHPLIPwithqt5.html
            You need to install the following dependencies
                PyQt5
                python-qt5-dbus
            Go to source of hplip. By default its in ~/Downloads.
            Run the following commands
                ./configure --prefix=/usr --enable-qt5 --disable-qt4
                make
                "make install" as root user
          become: false
          command: |
            [ -e /etc/hp/hplip.conf ] &&  {
              # hplip systray does not work in Ubuntu GNOME
              [ -e /etc/xdg/autostart/hplip-systray.desktop ] && sudo rm -f /etc/xdg/autostart/hplip-systray.desktop
              HP_LIP_VERSION=$(grep version /etc/hp/hplip.conf | sed -E "s/version=(.+)/\1/")
              CURRENT_LATEST_HP_LIP_VERSION=$(curl -sL https://developers.hp.com/hp-linux-imaging-and-printing/release_notes |grep -m 1 'HPLIP 3.' | \
                sed -E "s/.+HPLIP (3.+) -.+/\1/")
              [ "${HP_LIP_VERSION}" = "${CURRENT_LATEST_HP_LIP_VERSION}" ] || {
                echo -e "Installed hp-lip is not the latest, follow https://developers.hp.com/hp-linux-imaging-and-printing/gethplip to install latest version\nIn case of problem use advanced mode: https://developers.hp.com/hp-linux-imaging-and-printing/KnowledgeBase/InstallHPLIPwithqt5.html"
                exit 1
              }
            }
        - name: nss-order
          become: true
          command: |
            sed -i -E "s/^hosts: .+$/hosts:          myhostname files mdns4_minimal [NOTFOUND=return] dns/" /etc/nsswitch.conf
        - name: keepass-http
          become: true
          desc: Download KeePassRPC plugin to KeePass plugins for integration with Kee plugin to Firefox
          command: |
            [ -e /usr/lib/keepass2/Plugins/KeePassRPC.plgx ] || {
              curl -sL https://api.github.com/repos/kee-org/keepassrpc/releases/latest | jq -r ".assets[] |
                select(.name | test(\"KeePassRPC.plgx\")) | .browser_download_url" |
                  xargs curl -s -L -o "/usr/lib/keepass2/Plugins/KeePassRPC.plgx"
              echo "KeePassRPC downloaded, you may run Firefox with Kee plugin now and KeePass app"
            }
        - name: docker-config
          become: true
          command: |
            export DESIRED_DAEMON_CONFIG='{
              "max-concurrent-uploads": 10,
              "max-concurrent-downloads": 10,
              "exec-opts": ["native.cgroupdriver=systemd"],
              "log-driver": "json-file",
              "log-opts": {
                "max-size": "100m"
              },
              "storage-driver": "overlay2",
              "insecure-registries": [
                "192.168.0.0/16",
                "172.16.0.0/12",
                "10.0.0.0/8"
              ]
            }'
            [ "$(grep -c systemd /etc/docker/daemon.json 2>/dev/null || echo 0)" -eq 1 ] || (\
            echo -n "${DESIRED_DAEMON_CONFIG}" > /etc/docker/daemon.json; \
            systemctl restart docker && \
            systemctl is-enabled docker &>/dev/null || systemctl enable docker)

            [ "$(grep -c systemd /etc/docker/daemon.json 2>/dev/null || echo 0)" -eq 1 ] && \
            systemctl is-enabled docker &>/dev/null && systemctl is-active docker &>/dev/null
        - name: docker-group
          desc: Add user to docker group so that docker socket can be accessed w/o sudo
          become: false
          command: |
            [ "$(groups |grep -c docker)" -ne 0 ] || sudo usermod -aG docker ${USER}
        # TODO remove when confirming python2 is no more used
        # - name: python-alternatives
        #   become: true
        #   command: |
        #     [ $(update-alternatives --display python 2>/dev/null |grep -c priority) -eq 2 ] || (\
        #       update-alternatives --debug --install /usr/bin/python python /usr/bin/python3 10;\
        #       update-alternatives --debug --install /usr/bin/python python /usr/bin/python2 11;\
        #       update-alternatives --set python /usr/bin/python2)
        #     [ $(update-alternatives --display python 2>/dev/null |grep -c priority) -eq 2 ]
        - name: ruby-gems-on-path
          desc: Ensure ruby local gems are  on path. W/o it it is not possible to install asciidoctor below
          become: false
          command: |
            [ "$(grep -c './gem/ruby' ~/.bashrc)" -eq 0 ] || {
              echo 'PATH=${HOME}/.gem/ruby/{{ versions.ruby }}/bin:${PATH}' >> ~/.bashrc
            }
        - name: asciidoctor
          become: false
          desc: Requires ruby-gems-on-path above task to be completed and graphviz installed
          command: |
            [ $(gem list asciidoctor --no-verbose |grep -cE 'diagram|pdf') -ge 2 ] || (\
              gem install prawn asciidoctor asciidoctor-diagram rouge --user-install && \
              gem install asciidoctor-pdf --pre --user-install
            )
            [ $(gem list mathematical --no-verbose |wc -l) -ge 2 ] || (\
              sudo apt-get -qq -y install bison flex libffi-dev libxml2-dev \
                libgdk-pixbuf2.0-dev libcairo2-dev libpango1.0-dev libzstd-dev libwebp-dev fonts-lyx cmake ruby-dev
              gem install mathematical asciidoctor-mathematical --user-install
            )
            [ $(gem list asciidoctor --no-verbose |grep -cE 'diagram|pdf') -ge 2 ]
            [ $(gem list mathematical --no-verbose |wc -l) -ge 2 ]
        - name: sdkman
          become: false
          command: |
            [ -d ~/.sdkman/bin ] || (
            curl -s "https://get.sdkman.io" | bash
            bash -ic "sdk i java 17-openjdk /usr/lib/jvm/java-17-openjdk-amd64;\
            sdk i java 21-openjdk /usr/lib/jvm/java-21-openjdk-amd64;\
            sdk d java 21-openjdk;\
            sdk i maven;\
            sdk i groovy;\
            sdk i scala;")
            [ -e ~/.local/share/applications/jconsole.desktop  ] || {
              mkdir -p ~/.local/share/applications
              echo "[Desktop Entry]
            Version=1.0
            Name=JConsole (jconsole)
            GenericName=JConsole
            Comment=Java MBean Viewer
            Exec=/home/${USER}/.sdkman/candidates/java/current/bin/jconsole
            StartupNotify=true
            Terminal=false
            Type=Application
            Categories=Java;Profiling;" > ~/.local/share/applications/jconsole.desktop
              echo "JConsole (jconsole)"
            }
            [ $(bash -ic "sdk c 2>/dev/null" |grep -cE 'groovy|maven|scala|java') -eq 4 ]
        - name: crictl
          become: true
          command: |
            VERSION=$(git ls-remote -t https://github.com/kubernetes-sigs/cri-tools.git | cut -d'/' -f3 |sort -n |tail -n 1)
            [[ -x /usr/local/bin/crictl && "$(/usr/local/bin/crictl --version)" =~ ${VERSION} ]] || {
              wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
              sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
              rm -f crictl-$VERSION-linux-amd64.tar.gz
              echo 'runtime-endpoint: unix:///var/run/containerd/containerd.sock
            image-endpoint: unix:///var/run/containerd/containerd.sock' > /etc/crictl.yaml
            }
        - name: helm
          become: false
          command: |
            CURRENT_VERSION="$(curl -Ls https://github.com/helm/helm/releases | grep 'href="/helm/helm/releases/tag/v3.[0-9]*.[0-9]*\"' | \
              sed -E 's/.*\/helm\/helm\/releases\/tag\/(v[0-9\.]+)".*/\1/g' | head -1)"
            INSTALLED_VERSION="$(helm version 2>/dev/null | sed -E 's/.*\{Version:"([^"]+)".*/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
              helm repo add stable https://charts.helm.sh/stable
              helm repo add nginx-stable https://helm.nginx.com/stable
              helm repo add jenkinsci https://charts.jenkins.io
              helm repo add cilium https://helm.cilium.io/
              helm repo add bitnami https://charts.bitnami.com/bitnami
              helm repo add jetstack https://charts.jetstack.io
              helm repo add istio https://istio-release.storage.googleapis.com/charts
              helm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts
              helm repo update
              [ "$(helm plugin list |grep -c diff)" -eq 1 ] || {
                helm plugin install https://github.com/databus23/helm-diff
              } && {
                helm plugin update diff
              }
            }
        - name: minikube
          become: false
          command: |
            CURRENT_VERSION="$(curl -s "https://api.github.com/repos/kubernetes/minikube/releases/latest" | grep '"tag_name":' |  sed -E 's/.*"v([^"]+)".*/\1/')"
            INSTALLED_VERSION="$(minikube version 2>/dev/null | grep version: | sed -E 's/.*version: v([^"]+)/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64  &&
              chmod a+x minikube && sudo mv minikube /usr/bin/ && echo "minikube installed"
            }
        - name: cilium-cli
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/cilium/cilium-cli/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="$(cilium version | grep cilium-cli: | sed -E 's/^cilium.* (v[0-9\.]+).*/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum}
              sha256sum --check cilium-linux-amd64.tar.gz.sha256sum
              sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
              rm cilium-linux-amd64.tar.gz{,.sha256sum}
            }
        - name: code-plugins
          become: false
          command: |
            PLUGINS_TO_INSTALL="{{ vs_code_extensions }}"
            CODE_PLUGINS="$(code --list-extensions |wc -l)"
            [ "${CODE_PLUGINS}" -eq {{ vs_code_extensions.split() | length }} ] || {
              for i in ${PLUGINS_TO_INSTALL} ; do
                code --force --install-extension "$i"
              done
            }
        - name: krew
          become: false
          command: |
            KREW_VERSION=$(git ls-remote -t https://github.com/kubernetes-sigs/krew.git | grep -v '\^{}' | cut -d'/' -f3 |sort -n |tail -n 1)
            [[ -e ~/.krew/bin/kubectl-krew && "$(kubectl krew version 2>/dev/null |grep GitTag)" =~ ${KREW_VERSION} ]] || {
              [ "$(grep -c 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"' ~/.bashrc)" -eq 0 ] && \
              echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"' >> ~/.bashrc
              cd "$(mktemp -d)" &&
              curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/download/${KREW_VERSION}/krew{-linux_amd64.tar.gz,.yaml}" &&
              tar zxvf krew-linux_amd64.tar.gz &&
              KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" &&
              "$KREW" install krew &&
              "$KREW" install change-ns ctx whoami cilium unused-volumes apparmor-manager advise-psp np-viewer view-webhook &&
              "$KREW" update &&
              "$KREW" upgrade
            }
        - name: k9s
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL "https://api.github.com/repos/derailed/k9s/releases/latest" | jq -r ".tag_name")"
            INSTALLED_VERSION="$(k9s version -s 2>/dev/null |grep Version | sed -E 's/Version .*(v.*)/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || (
              cd "$(mktemp -d)" &&
              curl -sL "https://api.github.com/repos/derailed/k9s/releases/latest" | jq -r ".assets[] | select(.browser_download_url | endswith(\"k9s_Linux_amd64.tar.gz\")) |.browser_download_url" |
                xargs curl -sSL | tar -zxv -o k9s &&
                sudo mv k9s /usr/local/bin &&
                echo "k9s has been installed"
            )
        - name: okd
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/okd-project/okd/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="$(openshift-install version 2>/dev/null |grep 'openshift-install' | sed -E 's/^openshift-install (.*)/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              cd "$(mktemp -d)" &&
              curl -s https://api.github.com/repos/okd-project/okd/releases/latest | jq -r ".assets[] | select(.browser_download_url | contains(\"openshift-install-linux-4\")) |.browser_download_url" |
                xargs curl -sSL | tar -zx -o openshift-install &&
                sudo mv openshift-install /usr/local/bin
              curl -s https://api.github.com/repos/okd-project/okd/releases/latest | jq -r ".assets[] | select(.browser_download_url | contains(\"openshift-client-linux-4\")) |.browser_download_url" |
                xargs curl -sSL | tar -zx -o oc &&
                sudo mv oc /usr/local/bin &&
              curl -s https://api.github.com/repos/okd-project/okd/releases/latest | jq -r ".assets[] | select(.browser_download_url | contains(\"ccoctl-linux\")) |.browser_download_url" |
                xargs curl -sSL | tar -zx -o ccoctl &&
                sudo mv ccoctl /usr/local/bin &&
              echo "oc, openshift-install and ccoctl installed"
            }
        - name: kubectx-ns
          become: false
          command: |
            [ -h ~/bin/kubectx -o -h ~/bin/kubens ] || (
              git clone https://github.com/ahmetb/kubectx.git ~/.kubectx
              COMPDIR=$(pkg-config --variable=completionsdir bash-completion)
              ln -sf ~/.kubectx/kubectx ~/bin/kubectx
              ln -sf ~/.kubectx/kubens ~/bin/kubens
              sudo ln -sf ~/.kubectx/completion/kubens.bash $COMPDIR/kubens
              sudo ln -sf ~/.kubectx/completion/kubectx.bash $COMPDIR/kubectx
              echo kubectx and kubens enabled
            )
        - name: JDK Mission Control (jmc)
          become: false
          command: |
            [ -d ~/bin/.jmc ] || {
              cd "$(mktemp -d)" &&
            curl -sL https://api.github.com/repos/adoptium/jmc-overrides/releases/latest | \
              jq -r ".assets[] | select(.browser_download_url | contains(\"linux\")) | .browser_download_url" | \
            xargs curl -sSL | tar -zxv &&
              mv 'JDK Mission Control' ~/bin/.jmc &&
              ln -s ~/bin/.jmc/jmc ~/bin/jmc
            }
            [ -e ~/.local/share/applications/jmc.desktop  ] || {
              mkdir -p ~/.local/share/applications
              echo "[Desktop Entry]
            Version=1.0
            Name=JDK Mission Control (jmc)
            GenericName=JMC
            Comment=Java Profiler
            Exec=/home/$(whoami)/bin/jmc
            StartupNotify=true
            Terminal=false
            Icon=/home/$(whoami)/bin/.jmc/icon.xpm
            Type=Application
            Categories=Java;Profiling;" > ~/.local/share/applications/jmc.desktop
              echo "JDK Mission Control (jmc)"
            }
        - name: visualvm
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/oracle/visualvm/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="$(cat ~/bin/.visualvm/VERSION 2>&1)"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              cd "$(mktemp -d)" &&
              curl -sL https://api.github.com/repos/oracle/visualvm/releases/latest | \
                jq -r ".assets[]|select(.content_type|test(\"application/zip\"))|select(.name | test(\"visualvm\"))|.browser_download_url" | \
              xargs curl -sSLO
              rm -rf ~/bin/.visualvm
              unzip visualvm*.zip && rm visualvm*.zip &&
              mv visualvm* ~/bin/.visualvm &&
              ln -f -s ~/bin/.visualvm/bin/visualvm ~/bin/visualvm
              echo "${CURRENT_VERSION}" > ~/bin/.visualvm/VERSION
            }
            [ -e ~/.local/share/applications/visualvm.desktop  ] || {
              mkdir -p ~/.local/share/applications
              echo "[Desktop Entry]
            Version=1.0
            Name=VisualVM (visualvm)
            GenericName=VisualVM
            Comment=Java Oracle Profiler
            Exec=/home/$(whoami)/bin/visualvm
            StartupNotify=true
            Terminal=false
            Icon=/home/$(whoami)/bin/.visualvm/etc/visualvm.icns
            Type=Application
            Categories=Java;Profiling;" > ~/.local/share/applications/visualvm.desktop
              echo "VisualVM (visualvm)"
            }
        - name: calibre
          become: true
          command: |
            CURRENT_VERSION="$(curl -sL https://calibre-ebook.com/download_linux |grep 'The latest release of calibre is' | sed -E 's/.*The latest release of calibre is (.+)\..*/\1/')"
            INSTALLED_VERSION="$(calibre --version 2>/dev/null | sed -E 's/.*\(calibre (.*)\)/\1/')"
            [[ -n "${INSTALLED_VERSION}" && ("${CURRENT_VERSION}" == "${INSTALLED_VERSION}"*) ]] || {
              wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo bash
            }
        - name: kubectl plugins
          become: true
          command: |
            [ -h /usr/local/bin/kubectl-su ] || (
              ln -s {{ playbook_dir }}/../../k8s/scripts/kubesu /usr/local/bin/kubectl-su
              echo "kubectl su enabled"
            )
        - name: kubectl GKE GCLOUD auth plugin v1.25, and speedp IAP tunnel by installing NumPy lib as gcloud addon
          become: false
          command: |
            [ "$(grep -c 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' ~/.bashrc)" -ne 0  ] || (
              echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> ~/.bashrc
              echo "kubectl GKE GCLOUD auth plugin v1.25 enabled"
            )
            [ "$($(gcloud info --format='value(basic.python_location)') -m pip list |grep -c numpy)" -ne 0 ] || {
              $(gcloud info --format='value(basic.python_location)') -m pip install numpy
            }
        - name: shellcheck
          become: false
          command: |
            [ -x ~/bin/shellcheck ] || (
              cd ~/bin &&
              wget -qO- https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz | tar -xJv -o shellcheck-stable/shellcheck &&
              mv shellcheck-stable/shellcheck . && rmdir shellcheck-stable
            )
        - name: shfmt
          become: false
          command: |
            [ -x ~/bin/shfmt ] || (
              go install mvdan.cc/sh/v3/cmd/shfmt@latest
            )
        - name: markdownlinter
          become: true
          command: |
            gem list -i --silent mdl || gem install mdl
        - name: istioctl
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL https://github.com/istio/istio/releases | \
                  grep -o 'releases/[0-9]*.[0-9]*.[0-9]*/' | sort --version-sort | \
                  tail -1 | awk -F'/' '{ print $2}')"
            INSTALLED_VERSION="$(istioctl version --remote=false 2>/dev/null |sed -E 's/.*version: (.+)/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -sL https://istio.io/downloadIstioctl | sh -
              [[ "${PATH}" == *istioctl/bin* ]] || {
                echo 'export PATH=$PATH:$HOME/.istioctl/bin' >> ~/.bashrc
              }
            }
        - name: terraform-tofu-config
          desc: |
            additional terraform cli configuration, added autocomplete and plugins caching
          become: false
          command: |
            [ "$(grep -c 'complete -C /usr/bin/tofu tofu' ~/.bashrc)" -ne 0 ] || tofu -install-autocomplete
            [ "$(grep -c 'plugin_cache_dir' ~/.terraformrc 2>/dev/null || echo 0)" -ne 0 ] || {
              mkdir -p ~/.terraform.d/plugins
              echo -e 'plugin_cache_dir = "$HOME/.terraform.d/plugins"\nplugin_cache_may_break_dependency_lock_file = true' > ~/.terraformrc
            }
        - name: terraformer
          desc: |
            Reverse terraform
            Sample for GC:
            terraformer import google --connect=true --regions=`gcloud config get-value compute/region` --projects=`gcloud config get-value project` \
            --resources=dns,monitoring,addresses,autoscalers,regionAutoscalers,globalForwardingRules,healthChecks,globalAddresses,regionBackendServices,urlMaps,regionSslCertificates,forwardingRules,httpHealthChecks,targetTcpProxies,regionInstanceGroupManagers,targetHttpsProxies,backendServices,sslCertificates
            Sample for AWS
            awsume rolename@accounr
            cd "$(mktemp -d)"
            echo 'terraform {
              required_providers {
                aws = {
                  source  = "hashicorp/aws"
                  version = "~> 5"
                }
              }
              required_version = ">= 1.0"
            }' > versions.tf
            # terraformer supports only Terraform
            sudo apt install terraform
            terraform init
            # TODO https://github.com/GoogleCloudPlatform/terraformer/issues/1743
            terraformer import aws --resources=api_gateway,alb --regions=us-east-1 --profile=""
            sudo apt -y remove terraform
          become: true
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '"' -f 4)"
            INSTALLED_VERSION=$(terraformer --version 2>/dev/null | sed -E 's/version v(.*)/\1/g')
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              export PROVIDER=all
              curl -LO https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -sL https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | \
                grep tag_name | cut -d '"' -f 4)/terraformer-${PROVIDER}-linux-amd64
              chmod +x terraformer-${PROVIDER}-linux-amd64
              sudo mv terraformer-${PROVIDER}-linux-amd64 /usr/local/bin/terraformer
              echo "Terraformer has been installed"
            }
        - name: tofu
          become: true
          desc: Ensure latest version OpenTofu installed
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/opentofu/opentofu/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="$(tofu version 2>/dev/null |grep OpenTofu | sed "s/OpenTofu //g")"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -sL https://api.github.com/repos/opentofu/opentofu/releases/latest | jq -r ".assets[] |
                select(.name | test(\"amd64.deb\")) | .browser_download_url" |
                  xargs curl -s -L -o "/tmp/tofu.deb"
              apt -y install /tmp/tofu.deb
            }
        - name: terragrunt
          become: true
          desc: Ensure latest version of Terragrunt is installed
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="$(terragrunt --version 2>/dev/null | sed -E 's/.* version (.*)/\1/g')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -sL https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r ".assets[] |
                select(.name | test(\"linux_amd64\")) | .browser_download_url" |
                  xargs curl -s -L -o "/usr/local/bin/terragrunt"
              chmod a+x /usr/local/bin/terragrunt
              echo "Terragrunt has been installed"
            }
        - name: trivy
          become: true
          desc: Ensure latest version of Trivy is installed
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="v$(trivy --version 2>/dev/null |grep Version | sed -E 's/Version: (.*)/\1/g')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -sL https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r ".assets[] |
                select(.name | test(\"Linux-64bit.tar.gz$\")) | .browser_download_url" |
                  xargs curl -s -L -o "/tmp/trivy.tar.gz"
              cd /tmp && tar -xzf trivy.tar.gz trivy && rm trivy.tar.gz && mv trivy /usr/local/bin
              chmod a+x /usr/local/bin/trivy
              echo "Trivy has been installed"
            }
        - name: ibm-mq-client
          desc: |
            Install minimal MQ client library in /opt/mqm
            Bare commands are placed on path
            Sample MQ apps located in /opt/mqm/samp/bin

            To install MQ along with server on Ubuntu follow:
            https://developer.ibm.com/tutorials/mq-connect-app-queue-manager-ubuntu/
            or run a script:
            https://github.com/ibm-messaging/mq-dev-samples/blob/master/gettingStarted/installing-mq-ubuntu/mq-ubuntu-install.sh
          become: true
          command: |
            # TODO consider full server version
            # https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqadv/9.4.0.0-IBM-MQ-Advanced-for-Developers-LinuxX64.tar.gz
            # TODO add detect a new version
            [ -e /opt/mqm ] || {
              rm -rf /tmp/mq && mkdir -p /tmp/mq && cd /tmp/mq
              curl -sSL https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqdev/redist/{{ versions.mq }}-IBM-MQC-Redist-LinuxX64.tar.gz |
                tar -zx
              export genmqpkg_inc{sdk,tls,man,adm,samp}=1
              rm -rf /opt/mqm
              [ "$(grep -c 'opt/mqm' ~/.bashrc)" -gt 0 ] || {
                echo 'PATH=/opt/mqm/bin:${PATH}' >> ~/.bashrc
              }
              ./bin/genmqpkg.sh -b /opt/mqm
              rm -rf /tmp/mq
            }
        - name: tflint
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL "https://api.github.com/repos/terraform-linters/tflint/releases/latest" | grep '"tag_name":' |  sed -E 's/.*"v([^"]+)".*/\1/')"
            INSTALLED_VERSION="$(tflint --version 2>/dev/null | grep version |  sed -E 's/.*version ([^"]+)/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh |bash
            }
        - name: gnome-dark-theme
          become: false
          desc: To ensure Ubuntu is fully in dark theme
          command: |
            CURRENT_VALUE="$(gsettings get org.gnome.shell.extensions.user-theme name 2>/dev/null)"
            [ "${CURRENT_VALUE}" = "'Yaru-dark'" ] || {
              gsettings set org.gnome.shell enabled-extensions "['desktop-icons@csoriano', 'user-theme@gnome-shell-extensions.gcampax.github.com']"
              gsettings set org.gnome.shell.extensions.user-theme name 'Yaru-dark'
              gsettings set org.gnome.desktop.interface gtk-theme 'Yaru-dark'
              echo "Dark theme for Ubuntu Gnome has been set"
            }
        - name: gnome-config
          become: false
          desc: To ensure Gnome config is optimal one
          command: |
            CURRENT_VALUE="$(gsettings get org.gnome.desktop.thumbnail-cache maximum-age 2>/dev/null)"
            [ "${CURRENT_VALUE}" -eq 30 ] || {
              gsettings set org.gnome.desktop.thumbnail-cache maximum-age 30
              gsettings set org.gnome.desktop.thumbnail-cache maximum-size 128
              echo "Ubuntu Gnome thumbnail cache settings have been set"
            }
        - name: log-rotate-config
          become: true
          desc: To ensure Ubuntu has not too much system logs
          command: |
            CURRENT_VALUE="$(grep -c 'rotate [2-9]' /etc/logrotate.d/rsyslog 2>/dev/null)"
            [ "${CURRENT_VALUE}" -eq 0 ] || {
              sed -i 's/rotate .$/rotate 1/g' /etc/logrotate.d/rsyslog /etc/logrotate.conf
              sed -i 's/weekly/daily/g' /etc/logrotate.d/rsyslog /etc/logrotate.conf
              sed -i 's/#SystemMaxFiles=.*$/SystemMaxFiles=7/g' /etc/systemd/journald.conf
              sed -i 's/#SystemMaxUse=.*$/SystemMaxUse={{ systemd_journal.max_size }}/g' /etc/systemd/journald.conf
              sed -i 's/#RuntimeMaxUse=.*$/RuntimeMaxUse={{ systemd_journal.max_size }}/g' /etc/systemd/journald.conf
              echo "Ubuntu log rotate config has been changed"
            }
        - name: awscli2
          become: true
          desc: To install awscli2
          command: |
            CURRENT_VERSION="$(git ls-remote -t https://github.com/aws/aws-cli.git | grep -v '{}'|cut -d'/' -f3 | sort -t. -k1,1n -k2,2n -k3,3n |tail -n 1)"
            INSTALLED_VERSION="$(aws --version  |cut -d'/' -f2 |cut -d' ' -f1)"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              rm -rf /tmp/awscli-installer && mkdir -p /tmp/awscli-installer && cd /tmp/awscli-installer
              curl -sSLO "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
              unzip awscli-exe-linux-x86_64.zip
              sudo aws/install --update
              rm -rf /tmp/awscli-installer
              echo "AWC CLI Installed"
              curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "/tmp/session-manager-plugin.deb"
              dpkg -i /tmp/session-manager-plugin.deb
              echo "AWC Session Manager Plugin Installed"
            }
            [ -e /etc/bash_completion.d/aws_bash_completer ] || {
              echo 'complete -C aws_completer aws' > /etc/bash_completion.d/aws_bash_completer
              echo "AWC CLI Bash completion Enabled"
            }
        - name: ibmcloud
          become: false
          desc: To install ibmcloud cli
          command: |
            CURRENT_VERSION="$(curl -sL "https://api.github.com/repos/IBM-Cloud/ibm-cloud-cli-release/releases/latest" | grep '"tag_name":' |  sed -E 's/.*"v([^"]+)".*/\1/')"
            INSTALLED_VERSION="$(ibmcloud --version 2>/dev/null | sed -E 's/ibmcloud (.+)\+.*T.*/\1/')"
            [[ "${INSTALLED_VERSION}" == "${CURRENT_VERSION}"* ]] || {
              curl -fsSL https://clis.cloud.ibm.com/install/linux | sudo sh
              ibmcloud plugin install is -f
            }
        - name: awsp
          become: false
          command: |
            AWSP_BASHRC='#AWS Profile Switcher (awsp)
            source ~/bin/awsp_functions.sh
            alias awsall="_awsListProfile"
            alias awsp="_awsSetProfile"
            alias awswho="aws configure list"
            alias awswhoami="aws sts get-caller-identity"
            alias awsgettoken="aws sts get-session-token"
            [ -e "$HOME/.aws/credentials" ] && complete -W "$(cat $HOME/.aws/credentials | grep -Eo [.*] | tr -d [])" _awsSwitchProfile
            [ -e "$HOME/.aws/config" ] && complete -W "$(cat $HOME/.aws/config | grep -Eo [.*] | tr -d [] | cut -d " " -f 2)" _awsSetProfile'

            [ -e ~/bin/awsp_functions.sh  ] || {
              cd ~/bin && curl -sSLO https://raw.githubusercontent.com/antonbabenko/awsp/master/awsp_functions.sh && chmod u+x awsp_functions.sh
              echo "${AWSP_BASHRC}" >> ~/.bashrc
              echo "AWSP Installed"
            }
        - name: awsume
          desc: |
            Ensure AWS config is present: https://awsu.me/general/aws-file-configuration.html
          become: false
          command: |
            AWSSUME_BASHRC='alias awsume=". awsume"'
            [ "$(grep -c 'awsume' ~/.bashrc)" -gt 0 ] || {
              echo "${AWSSUME_BASHRC}" >> ~/.bashrc
            }
        - name: chrome unsafe link
          become: false
          desc: chrome allowing access to site with self-signed or invalid TLS certificates
          command: |
            [ -e ~/.local/share/applications/unsafe-chrome.desktop  ] || {
              mkdir -p ~/.local/share/applications
              echo '[Desktop Entry]
            Version=1.0
            Name=Unsafe Google Chrome
            GenericName=Web Browser
            Comment=Access the Internet
            Exec=/usr/bin/google-chrome-stable --ignore-certificate-errors
            StartupNotify=true
            Terminal=false
            Icon=google-chrome
            Type=Application
            Categories=Network;WebBrowser;' > ~/.local/share/applications/unsafe-chrome.desktop
              echo "Unsafe Chrome link installed"
            }
        - name: guake link
          become: false
          desc: guake link so that it can be add to tweaks autostart
          command: |
            [ -e ~/.local/share/applications/guake.desktop  ] || {
              mkdir -p ~/.local/share/applications
              echo '[Desktop Entry]
            Version=1.0
            Name=Guake
            GenericName=Guake
            Comment=Guake
            Exec=/usr/bin/guake
            StartupNotify=true
            Terminal=false
            Type=Application
            Categories=Terminal;' > ~/.local/share/applications/guake.desktop
              echo "Guake link installed"
            }
        - name: caprine
          become: true
          desc: Ensure latest version of Caprine/unofficial Messenger client for Linux is installed
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/sindresorhus/caprine/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="$(dpkg -s caprine 2>/dev/null |grep Version | sed "s/Version: /v/g")"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -sL https://api.github.com/repos/sindresorhus/caprine/releases/latest | jq -r ".assets[] |
                select(.name | test(\".deb\")) | .browser_download_url" |
                  xargs curl -s -L -o "/tmp/caprine.deb"
              apt -y install /tmp/caprine.deb
            }
        - name: cri-dockerd
          become: true
          desc: Ensure latest version of cri-dockerd is installed. cri-dockerd is a requirement for Minikube to run
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="$(cri-dockerd --version 2>&1| sed -E "s/cri-dockerd (.*) .*/v\1/g")"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -sL https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest  | jq -r ".assets[] |
                select(.name | test(\"ubuntu-{{ versions.cri_dockerd_ubuntu_version }}_amd64.deb\")) | .browser_download_url" |
                  xargs curl -s -L -o "/tmp/cri-dockerd.deb"
              apt -y install /tmp/cri-dockerd.deb
            }
        - name: discord
          become: true
          desc: Discord app
          command: |
            DOWNLOAD_URL="$(curl -s -o /dev/null -w '%header{location}' https://discord.com/api/download?platform=linux)"
            CURRENT_VERSION="$(echo $DOWNLOAD_URL | sed -E 's/.*linux\/([0..9].+)\/discord.*/\1/')"
            INSTALLED_VERSION="$(apt list discord 2>/dev/null | grep discord |  sed -E 's/.* ([0..9].+) amd.*/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -s -L -o "/tmp/discord.deb" "${DOWNLOAD_URL}"
              apt -y install /tmp/discord.deb
            }
        - name: poetry
          desc: Dependency management for Python
          become: false
          command: |
            [ -x ~/.local/bin/poetry ] || (
              curl -sSL https://install.python-poetry.org | python3 -
              poetry completions bash >> ~/.bash_completion
              # ensure poetry will create virtualenv in project directory
              poetry config virtualenvs.in-project true
            )
        - name: nvm
          desc: Node.js swithing engine
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r ".tag_name")"
            INSTALLED_VERSION="v$(~/.nvm/nvm.sh && nvm --version)"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/${CURRENT_VERSION}/install.sh" | bash
              ~/.nvm/nvm.sh && nvm install --lts
            }
        files_config:
        - file: /etc/gai.conf
          content: |
            precedence  ::1/128       50
            precedence  ::/0          40
            precedence  2002::/16     30
            precedence ::/96          20
            precedence ::ffff:0:0/96  100
        - file: /etc/security/limits.d/open-files-limit.conf
          content: |
            *   soft    nofile    32768
            *   hard    nofile    65536
        - file: /etc/autofs.conf
          content: |
            logging = verbose
        - file: /etc/modules
          content: |
            # The list here shoud be generated by `sudo sensors-detect`
            # Chip drivers
            coretemp
