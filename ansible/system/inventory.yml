---
all:
  children:
    local:
      hosts:
        localhost:
      vars:
        versions:
          crio: 1.22
          # libcontainers && cri-o :: https://github.com/cri-o/cri-o/blob/master/install.md#apt-based-operating-systems
          # use {{ ansible_distribution_version }} instead of current Ubuntu version is supported, otherwise hardcode version (aka: 21.04)
          # TODO change to commented when impish/21.10 is supported Ubuntu
          # libcontainers_repo_ubuntu_version: "{{ ansible_distribution_version }}"
          libcontainers_repo_ubuntu_version: "21.04"
          # libcontainers_crio_repo_ubuntu_version: "{{ ansible_distribution_version }}"
          libcontainers_crio_repo_ubuntu_version: "21.04"
          # terraform_ubuntu_version: "{{ ansible_distribution_release }}"
          terraform_ubuntu_version: "hirsute"
          # virtualbox_ubuntu_version: "{{ ansible_distribution_release }}"
          virtualbox_ubuntu_version: "hirsute"
        virtual_interface_ip: 192.168.10.1
        update_cache_timeout: 300
        systemd_journal:
          max_size: 1G
          max_duration: 10days
        vs_code_extensions: |
          4ops.packer
          4ops.terraform
          asciidoctor.asciidoctor-vscode
          DavidAnson.vscode-markdownlint
          donjayamanne.githistory
          DotJoshJohnson.xml
          eamodio.gitlens
          formulahendry.code-runner
          foxundermoon.shell-format
          GabrielBB.vscode-lombok
          golang.go
          hashicorp.terraform
          joaompinto.asciidoctor-vscode
          ms-azuretools.vscode-docker
          ms-kubernetes-tools.vscode-kubernetes-tools
          ms-python.python
          ms-python.vscode-pylance
          ms-toolsai.jupyter
          ms-toolsai.jupyter-keymap
          ms-toolsai.jupyter-renderers
          Pivotal.vscode-boot-dev-pack
          Pivotal.vscode-spring-boot
          redhat.fabric8-analytics
          redhat.java
          redhat.vscode-commons
          redhat.vscode-yaml
          scala-lang.scala
          streetsidesoftware.code-spell-checker
          techer.open-in-browser
          tomoki1207.pdf
          VisualStudioExptTeam.vscodeintellicode
          vscjava.vscode-java-debug
          vscjava.vscode-java-dependency
          vscjava.vscode-java-pack
          vscjava.vscode-java-test
          vscjava.vscode-maven
          vscjava.vscode-spring-boot-dashboard
          vscjava.vscode-spring-initializr
          wholroyd.jinja
        repositories:
        - name: universe
        - name: multiverse
        - name: vscode
          repo: "deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main"
        - name: teams
          repo: "deb [arch=amd64] https://packages.microsoft.com/repos/ms-teams stable main"
        - name: skype-stable
          repo: "deb [arch=amd64] https://repo.skype.com/deb stable main"
          key_url: https://repo.skype.com/data/SKYPE-GPG-KEY
        - name: google-chrome
          repo: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
          key_url: https://dl.google.com/linux/linux_signing_key.pub
        - name: virtualbox
          repo: >-
            deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian {{ versions.virtualbox_ubuntu_version }} contrib
        - name: libcontainers
          repo: >-
            deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x{{ ansible_distribution }}_{{ versions.libcontainers_repo_ubuntu_version }}/ /
          key_url: >-
            https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/x{{ ansible_distribution }}_{{ versions.libcontainers_repo_ubuntu_version }}/Release.key
        - name: libcontainers-crio
          repo: >-
            deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ versions.crio }}/x{{ ansible_distribution }}_{{ versions.libcontainers_crio_repo_ubuntu_version }}/ /
          key_url: >-
            https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ versions.crio }}/x{{ ansible_distribution }}_{{ versions.libcontainers_crio_repo_ubuntu_version }}/Release.key
        - name: google-cloud-sdk
          repo: "deb [arch=amd64] https://packages.cloud.google.com/apt cloud-sdk main"
          key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        - name: openvpn
          repo: "deb [arch=amd64] https://swupdate.openvpn.net/community/openvpn3/repos grovy main"
          key_url: https://swupdate.openvpn.net/repos/openvpn-repo-pkg-key.pub
        - name: terraform
          repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ versions.terraform_ubuntu_version }} main"
          key_url: https://apt.releases.hashicorp.com/gpg
        packages:
        - lm-sensors
        - hddtemp
        - psensor
        - inotify-tools
        - brasero
        - autofs
        - bind9
        - cifs-utils
        - dlocate
        - ubuntu-restricted-extras
        - gnome-shell-extensions
        - grub-customizer
        - hplip
        - hplip-gui
        - ddclient
        - golang-1.17-go
        - golang-golang-x-tools
        - python3-pip
        - ruby
        - openjdk-8-jdk
        - openjdk-8-source
        - openjdk-11-jdk
        - openjdk-11-source
        - openjdk-17-jdk
        - openjdk-17-source
        - dos2unix
        - guake
        - mono-complete
        - jq
        - curl
        - keepass2
        - code
        - onedrive
        - nautilus-dropbox
        - ffmpeg
        - openssh-server
        - iftop
        - dosbox
        - steam
        - virt-manager
        - docker.io
        - conntrack
        - fuse-overlayfs
        - virtualbox-6.1
        - containernetworking-plugins
        - cri-o
        - podman
        - buildah
        - skopeo
        - terraform
        - notepadqq
        - teams
        - google-chrome-stable
        - google-cloud-sdk
        - google-cloud-sdk-cloud-build-local
        - google-cloud-sdk-kpt
        - kubectl
        # Skipped packages:
        # - skypeforlinux
        - openvpn3
        snaps:
        - mc-installer
        - notepad-plus-plus
        # Uncomment to use snap packages for gcloud sdk
        # classic_snaps:
        # - google-cloud-sdk
        # - kubectl
        pips:
        - pip
        - tox
        - flake8
        - flake8-docstrings
        - flake8-2020
        - openshift
        # do not update kubernetes itself to latest as it is not compatible with openhishift / k8s module
        # - kubernetes
        - kubernetes-validate
        - "molecule[lint]"
        - "molecule[docker]"
        - ansible
        - ansible-lint
        - requests
        - pre-commit
        - pylint
        - pytest
        - pipenv
        - pipenv-setup
        - yamllint
        - youtube-dl
        clis:
        - name: virtual-network-interface
          desc: To ensure there is a virtual interface with stable IP
          become: true
          command: |
            [[ "$(nmcli -f ip4.address c s br0 2>/dev/null)" =~ {{ virtual_interface_ip }} ]] || {
              nmcli conn add type bridge con-name br0 ifname br0
              nmcli conn modify br0 ipv4.addresses '{{ virtual_interface_ip }}/24'
              nmcli conn modify br0 ipv4.gateway '{{ virtual_interface_ip }}'
              nmcli conn modify br0 ipv4.dns '{{ virtual_interface_ip }}'
              nmcli conn modify br0 ipv4.method manual
              nmcli conn modify br0 ipv4.never-default yes
              nmcli conn modify br0 connection.autoconnect yes
              nmcli conn up br0
            }
        - name: vboxuser
          desc: To ensure VBox can see host USB
          become: false
          command: |
            [ "$(groups |grep -c vboxusers)" -eq 0 ] || sudo usermod -aG vboxusers ${USER}
        - name: ansible-community-kubernetes-collections
          desc: To ensure Ansible galaxy collection community.kubernetes with k8s, helm modules is present
          become: false
          command: |
            [ -n "$(ansible-galaxy collection list community.kubernetes --format json |jq -r '(try ..)|.version' |grep -v null)" ] || {
              ansible-galaxy collection install community.kubernetes
              echo "Ansible collection community.kubernetes has been installed"
            }
        - name: git-config
          become: false
          command: |
            [ "$(git config --global pull.rebase)" == "true" ] || {
              git config --global pull.rebase true
              git config --global credential.helper store
            }
            ([ -n "$(git config --global user.name)" ] && [ -n "$(git config --global user.email)" ]) || {
              echo "Git user.name and user.email MUST be set"
              exit 1
            }
        - name: ensure-hp-lip
          desc: |
            Ensure the latest hplip is installed from source
            TODO the latest 3.21.8 cannot be installed on Ubuntu 21.04 out of the box yet: https://bugs.launchpad.net/hplip/+bug/1879353
            To install latest HPLIP in advanced mode (without GUI): https://developers.hp.com/hp-linux-imaging-and-printing/KnowledgeBase/InstallHPLIPwithqt5.html
            You need to install the following dependencies
                PyQt5
                python-qt5-dbus
            Go to source of hplip. By default its in ~/Downloads.
            Run the following commands
                ./configure --prefix=/usr --enable-qt5 --disable-qt4
                make
                "make install" as root user
          become: false
          command: |
            [ -e /etc/hp/hplip.conf ] &&  {
              # hplip systray does not work in Ubuntu GNOME
              [ -e /etc/xdg/autostart/hplip-systray.desktop ] && sudo rm -f /etc/xdg/autostart/hplip-systray.desktop
              HP_LIP_VERSION=$(grep version /etc/hp/hplip.conf | sed -E "s/version=(.+)/\1/")
              CURRENT_LATEST_HP_LIP_VERSION=$(curl -sL https://developers.hp.com/hp-linux-imaging-and-printing/release_notes |grep -m 1 'HPLIP 3.' | \
                sed -E "s/.+HPLIP (3.+) -.+/\1/")
              [ "${HP_LIP_VERSION}" = "${CURRENT_LATEST_HP_LIP_VERSION}" ] || {
                echo -e "Installed hp-lip is not the latest, follow https://developers.hp.com/hp-linux-imaging-and-printing/gethplip to install latest version\nIn case of problem use advanced mode: https://developers.hp.com/hp-linux-imaging-and-printing/KnowledgeBase/InstallHPLIPwithqt5.html"
                exit 1
              }
            }
        - name: nss-order
          become: true
          command: |
            sed -i -E "s/^hosts: .+$/hosts:          myhostname files mdns4_minimal [NOTFOUND=return] dns/" /etc/nsswitch.conf
        - name: docker-config
          become: true
          command: |
            export DESIRED_DAEMON_CONFIG='{
              "max-concurrent-uploads": 10,
              "max-concurrent-downloads": 10,
              "exec-opts": ["native.cgroupdriver=systemd"],
              "log-driver": "json-file",
              "log-opts": {
                "max-size": "100m"
              },
              "storage-driver": "overlay2",
              "insecure-registries": [
                "192.168.0.0/16",
                "172.16.0.0/12",
                "10.0.0.0/8"
              ]
            }'
            [ "$(grep -c systemd /etc/docker/daemon.json 2>/dev/null || echo 0)" -eq 1 ] || (\
            echo -n "${DESIRED_DAEMON_CONFIG}" > /etc/docker/daemon.json; \
            systemctl restart docker && \
            systemctl is-enabled docker &>/dev/null || systemctl enable docker)

            [ "$(grep -c systemd /etc/docker/daemon.json 2>/dev/null || echo 0)" -eq 1 ] && \
            systemctl is-enabled docker &>/dev/null && systemctl is-active docker &>/dev/null
        - name: python-alternatives
          become: true
          command: |
            [ $(update-alternatives --display python 2>/dev/null |grep -c priority) -eq 2 ] || (\
              update-alternatives --debug --install /usr/bin/python python /usr/bin/python3 10;\
              update-alternatives --debug --install /usr/bin/python python /usr/bin/python2 11;\
              update-alternatives --set python /usr/bin/python2)
            [ $(update-alternatives --display python 2>/dev/null |grep -c priority) -eq 2 ]
        - name: asciidoctor
          become: false
          command: |
            [ $(gem list asciidoctor --no-verbose |grep -cE 'diagram|pdf') -eq 2 ] || (\
              gem install prawn asciidoctor asciidoctor-diagram rouge --user-install && \
              gem install asciidoctor-pdf --pre --user-install)
            [ $(gem list asciidoctor --no-verbose |grep -cE 'diagram|pdf') -eq 2 ]
        - name: sdkman
          become: false
          command: |
            [ $(bash -ic "sdk c 2>/dev/null" |grep -cE 'groovy|maven|scala|java') -eq 4 ] || (\
            curl -s "https://get.sdkman.io" | bash
            bash -ic "sdk i java 8-openjdk /usr/lib/jvm/java-8-openjdk-amd64;\
            sdk i java 11-openjdk /usr/lib/jvm/java-11-openjdk-amd64;\
            sdk i java 17-openjdk /usr/lib/jvm/java-17-openjdk-amd64;\
            sdk d java 17-openjdk;\
            sdk i maven;\
            sdk i groovy;\
            sdk i scala")
            [ $(bash -ic "sdk c 2>/dev/null" |grep -cE 'groovy|maven|scala|java') -eq 4 ]
        - name: runc-conmon-fix
          desc: Ensure runc and conmon binaries for CRIO are on sysmte path, related to https://github.com/cri-o/cri-o/issues/1767
          become: true
          command: |
            [ -e /usr/bin/runc ] || { ln -s /usr/sbin/runc /usr/bin/runc; echo "runc path fixed"; }
            [ -e /usr/bin/conmon ] || { sudo ln -s /usr/libexec/podman/conmon /usr/bin/conmon; echo "conmon path fixed"; }
        - name: crictl
          become: false
          command: |
            VERSION=$(git ls-remote -t https://github.com/kubernetes-sigs/cri-tools.git | cut -d'/' -f3 |sort -n |tail -n 1)
            [[ -x /usr/local/bin/crictl && "$(/usr/local/bin/crictl --version)" =~ ${VERSION} ]] || {
              wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
              sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
              rm -f crictl-$VERSION-linux-amd64.tar.gz
            }
        - name: helm
          become: false
          command: |
            CURRENT_VERSION="$(curl -Ls https://github.com/helm/helm/releases | grep 'href="/helm/helm/releases/tag/v3.[0-9]*.[0-9]*\"' | \
              sed -E 's/.*\/helm\/helm\/releases\/tag\/(v[0-9\.]+)".*/\1/g' | head -1)"
            INSTALLED_VERSION="$(helm version 2>/dev/null | sed -E 's/.*\{Version:"([^"]+)".*/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
              helm repo add stable https://charts.helm.sh/stable
              helm repo add nginx-stable https://helm.nginx.com/stable
              helm repo add jenkinsci https://charts.jenkins.io
              helm repo add cilium https://helm.cilium.io/
              helm repo add bitnami https://charts.bitnami.com/bitnami
              helm repo update
              [ "$(helm plugin list |grep -c diff)" -eq 1 ] || {
                helm plugin install https://github.com/databus23/helm-diff
              } && {
                helm plugin update diff
              }
            }
        - name: minikube
          become: false
          command: |
            CURRENT_VERSION="$(curl -s "https://api.github.com/repos/kubernetes/minikube/releases/latest" | grep '"tag_name":' |  sed -E 's/.*"v([^"]+)".*/\1/')"
            INSTALLED_VERSION="$(minikube version 2>/dev/null | grep version: | sed -E 's/.*version: v([^"]+)/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64  &&
              chmod a+x minikube && sudo mv minikube /usr/bin/ && echo "minikube installed"
            }
        - name: cilium-cli
          become: false
          command: |
            CURRENT_VERSION="$(curl -s https://github.com/cilium/cilium-cli/releases/latest |grep tag | sed -E 's/.*v([0-9\.]+).*/\1/')"
            INSTALLED_VERSION="$(cilium version | grep cilium-cli: | sed -E 's/^cilium.* v([0-9\.]+).*/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum}
              sha256sum --check cilium-linux-amd64.tar.gz.sha256sum
              sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
              rm cilium-linux-amd64.tar.gz{,.sha256sum}
            }
        - name: code-plugins
          become: false
          command: |
            PLUGINS_TO_INSTALL="{{ vs_code_extensions }}"
            CODE_PLUGINS="$(code --list-extensions |wc -l)"
            [ "${CODE_PLUGINS}" -eq 39 ] || {
              for i in ${PLUGINS_TO_INSTALL} ; do
                code --force --install-extension "$i"
              done
            }
        - name: krew
          become: false
          command: |
            KREW_VERSION=$(git ls-remote -t https://github.com/kubernetes-sigs/krew.git | grep -v '\^{}' | cut -d'/' -f3 |sort -n |tail -n 1)
            [[ -e ~/.krew/bin/kubectl-krew && "$(kubectl krew version 2>/dev/null |grep GitTag)" =~ ${KREW_VERSION} ]] || {
              [ "$(grep -c 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"' ~/.bashrc)" -eq 0 ] && \
              echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"' >> ~/.bashrc
              cd "$(mktemp -d)" &&
              curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/download/${KREW_VERSION}/krew{-linux_amd64.tar.gz,.yaml}" &&
              tar zxvf krew-linux_amd64.tar.gz &&
              KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" &&
              "$KREW" install --manifest=krew.yaml --archive=krew.tar.gz &&
              "$KREW" install change-ns ctx whoami cilium unused-volumes apparmor-manager advise-psp np-viewer view-webhook &&
              "$KREW" update &&
              "$KREW" upgrade
            }
        - name: k9s
          become: false
          command: |
            K9S_VERSION=$(git ls-remote -t https://github.com/derailed/k9s.git | grep -v '\^{}' | cut -d'/' -f3 |sort -n |tail -n 1 | cut -d'v' -f2)
            [[ -x /usr/local/bin/k9s && "$(k9s version -s |grep Version)" =~ ${K9S_VERSION} ]] || (
              cd "$(mktemp -d)" &&
              curl -fsSLO "https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/k9s_Linux_x86_64.tar.gz" &&
              tar -zxvf k9s_Linux_x86_64.tar.gz -o k9s &&
              sudo mv k9s /usr/local/bin
            )
        - name: kubectx-ns
          become: false
          command: |
            [ -h ~/bin/kubectx -o -h ~/bin/kubens ] || (
              git clone https://github.com/ahmetb/kubectx.git ~/.kubectx
              COMPDIR=$(pkg-config --variable=completionsdir bash-completion)
              ln -sf ~/.kubectx/kubectx ~/bin/kubectx
              ln -sf ~/.kubectx/kubens ~/bin/kubens
              sudo ln -sf ~/.kubectx/completion/kubens.bash $COMPDIR/kubens
              sudo ln -sf ~/.kubectx/completion/kubectx.bash $COMPDIR/kubectx
              echo kubectx and kubens enabled
            )
        - name: JDK Mission Control (jmc)
          become: false
          command: |
            [ -d ~/bin/.jmc ] || {
              cd "$(mktemp -d)" &&
              curl -sSL https://github.com/adoptium/jmc-overrides/releases/download/8.1.0/org.openjdk.jmc-8.1.0-linux.gtk.x86_64.tar.gz | tar -zxv &&
              mv 'JDK Mission Control' ~/bin/.jmc &&
              ln -s ~/bin/.jmc/jmc ~/bin/jmc
            }
            [ -e ~/.local/share/applications/jmc.desktop  ] || {
              mkdir -p ~/.local/share/applications
              echo "[Desktop Entry]
            Version=1.0
            Name=JDK Mission Control (jmc)
            GenericName=JMC
            Comment=Java Profiler
            Exec=/home/$(whoami)/bin/jmc
            StartupNotify=true
            Terminal=false
            Icon=/home/$(whoami)/bin/.jmc/icon.xpm
            Type=Application
            Categories=Java;Profiling;" > ~/.local/share/applications/jmc.desktop
              echo "JDK Mission Control (jmc)"
            }
        - name: calibre
          become: true
          command: |
            CURRENT_VERSION="$(curl -sL https://calibre-ebook.com/download_linux |grep 'The latest release of calibre is' | sed -E 's/.*The latest release of calibre is (.+)\..*/\1/')"
            INSTALLED_VERSION="$(calibre --version 2>/dev/null | sed -E 's/.*\(calibre (.*)\)/\1/')"
            [[ "${CURRENT_VERSION}" == *"${INSTALLED_VERSION}"* ]] || {
              wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo bash
            }
        - name: kubectl plugins
          become: true
          command: |
            [ -h /usr/local/bin/kubectl-su ] || (
              ln -s {{ playbook_dir }}/../../k8s/scripts/kubesu /usr/local/bin/kubectl-su
              echo "kubectl su enabled"
            )
        - name: shellcheck
          become: false
          command: |
            [ -x ~/bin/shellcheck ] || (
              cd ~/bin &&
              wget -qO- https://storage.googleapis.com/shellcheck/shellcheck-stable.linux.x86_64.tar.xz | tar -xJv -o shellcheck-stable/shellcheck &&
              mv shellcheck-stable/shellcheck . && rmdir shellcheck-stable
            )
        - name: shfmt
          become: false
          command: |
            GO111MODULE=on go get mvdan.cc/sh/v3/cmd/shfmt
        - name: markdownlinter
          become: true
          command: |
            gem list -i --silent mdl || gem install mdl
        - name: istioctl
          become: false
          command: |
            CURRENT_VERSION="$(curl -sL https://github.com/istio/istio/releases | \
                  grep -o 'releases/[0-9]*.[0-9]*.[0-9]*/' | sort --version-sort | \
                  tail -1 | awk -F'/' '{ print $2}')"
            INSTALLED_VERSION=$(istioctl version 2>/dev/null | grep -E '^([0-9]+.){2,3}[0-9]+$')
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl -sL https://istio.io/downloadIstioctl | sh -
              [[ "${PATH}" == *istioctl/bin* ]] || {
                echo 'export PATH=$PATH:$HOME/.istioctl/bin' >> ~/.bashrc
              }
            }
        - name: terraform-config
          desc: |
            additional terraform cli configuration, added autocomplete and plugins caching
          become: false
          command: |
            [ "$(grep -c 'complete -C /usr/bin/terraform terraform' ~/.bashrc)" -ne 0 ] || terraform -install-autocomplete
            [ "$(grep -c 'plugin_cache_dir' ~/.terraformrc 2>/dev/null || echo 0)" -ne 0 ] || {
              mkdir -p ~/.terraform.d/plugins
              echo 'plugin_cache_dir = "$HOME/.terraform.d/plugins"' >> ~/.terraformrc
            }
        - name: terraformer
          become: true
          command: |
            CURRENT_VERSION="$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '"' -f 4)"
            INSTALLED_VERSION=$(terraformer --version 2>/dev/null | sed -E 's/version v(.*)/\1/g')
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              export PROVIDER=all
              curl -LO https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | \
                grep tag_name | cut -d '"' -f 4)/terraformer-${PROVIDER}-linux-amd64
              chmod +x terraformer-${PROVIDER}-linux-amd64
              sudo mv terraformer-${PROVIDER}-linux-amd64 /usr/local/bin/terraformer
            }
        - name: tflint
          become: false
          command: |
            CURRENT_VERSION="$(curl -s "https://api.github.com/repos/terraform-linters/tflint/releases/latest" | grep '"tag_name":' |  sed -E 's/.*"v([^"]+)".*/\1/')"
            INSTALLED_VERSION="$(tflint --version 2>/dev/null |  sed -E 's/.*version ([^"]+)/\1/')"
            [ "${CURRENT_VERSION}" = "${INSTALLED_VERSION}" ] || {
              curl https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh |bash
            }
        - name: gnome-dark-theme
          become: false
          desc: To ensure Ubuntu is fully in dark theme
          command: |
            CURRENT_VALUE="$(gsettings get org.gnome.shell.extensions.user-theme name 2>/dev/null)"
            [ "${CURRENT_VALUE}" = "'Yaru-dark'" ] || {
              gsettings set org.gnome.shell enabled-extensions "['desktop-icons@csoriano', 'user-theme@gnome-shell-extensions.gcampax.github.com']"
              gsettings set org.gnome.shell.extensions.user-theme name 'Yaru-dark'
              gsettings set org.gnome.desktop.interface gtk-theme 'Yaru-dark'
              echo "Dark theme for Ubuntu Gnome has been set"
            }
        - name: gnome-config
          become: false
          desc: To ensure Gnome config is optimal one
          command: |
            CURRENT_VALUE="$(gsettings get org.gnome.desktop.thumbnail-cache maximum-age 2>/dev/null)"
            [ "${CURRENT_VALUE}" -eq 30 ] || {
              gsettings set org.gnome.desktop.thumbnail-cache maximum-age 30
              gsettings set org.gnome.desktop.thumbnail-cache maximum-size 128
              echo "Ubuntu Gnome thumbnail cache settings have been set"
            }
        - name: log-rotate-config
          become: true
          desc: To ensure Ubuntu has not too much system logs
          command: |
            CURRENT_VALUE="$(grep -c 'rotate [2-9]' /etc/logrotate.d/rsyslog 2>/dev/null)"
            [ "${CURRENT_VALUE}" -eq 0 ] || {
              sed -i 's/rotate .$/rotate 1/g' /etc/logrotate.d/rsyslog /etc/logrotate.conf
              sed -i 's/weekly/daily/g' /etc/logrotate.d/rsyslog /etc/logrotate.conf
              sed -i 's/#SystemMaxFiles=.*$/SystemMaxFiles=7/g' /etc/systemd/journald.conf
              sed -i 's/#SystemMaxUse=.*$/SystemMaxUse={{ systemd_journal.max_size }}/g' /etc/systemd/journald.conf
              sed -i 's/#RuntimeMaxUse=.*$/RuntimeMaxUse={{ systemd_journal.max_size }}/g' /etc/systemd/journald.conf
              echo "Ubuntu log rotate config has been changed"
            }
        - name: awscli2
          become: true
          desc: To install awscli2
          command: |
            # TODO compare current vesion with latest tag from github
            CURRENT_VERSION="$(git ls-remote -t https://github.com/aws/aws-cli.git | grep -v '{}'|cut -d'/' -f3 |sort -n |tail -n 1)"
            [ -e /usr/local/bin/aws ] || {
              rm -rf /tmp/awscli-installer && mkdir -p /tmp/awscli-installer && cd /tmp/awscli-installer
              curl -sSLO "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
              unzip awscli-exe-linux-x86_64.zip
              sudo aws/install --update
              rm -rf /tmp/awscli-installer
              echo "AWC CLI Installed"
            }
            [ -e /etc/bash_completion.d/aws_bash_completer ] || {
              echo 'complete -C aws_completer aws' > /etc/bash_completion.d/aws_bash_completer
              echo "AWC CLI Bash completion Enabled"
            }
        - name: awsp
          become: false
          command: |
            [ -e ~/bin/awsp_functions.sh  ] || {
              cd ~/bin && curl -sSLO https://raw.githubusercontent.com/antonbabenko/awsp/master/awsp_functions.sh && chmod u+x awsp_functions.sh
              AWSP_BASHRC='#AWS Profile Switcher (awsp)
              source ~/bin/awsp_functions.sh
              alias awsall="_awsListProfile"
              alias awsp="_awsSetProfile"
              alias awswho="aws configure list"
              alias awswhoami="aws sts get-caller-identity"
              alias awsgettoken="aws sts get-session-token"
              complete -W "$(cat $HOME/.aws/credentials | grep -Eo '\[.*\]' | tr -d '[]')" _awsSwitchProfile
              complete -W "$(cat $HOME/.aws/config | grep -Eo '\[.*\]' | tr -d '[]' | cut -d " " -f 2)" _awsSetProfile'
              echo "${AWSP_BASHRC}" >> ~/.bashrc
              echo "AWSP Installed"
            }
        - name: chrome unsafe link
          become: false
          desc: chrome allowing access to site with self-signed or invalid TLS certificates
          command: |
            [ -e ~/.local/share/applications/unsafe-chrome.desktop  ] || {
              mkdir -p ~/.local/share/applications
              echo '[Desktop Entry]
            Version=1.0
            Name=Unsafe Google Chrome
            GenericName=Web Browser
            Comment=Access the Internet
            Exec=/usr/bin/google-chrome-stable --ignore-certificate-errors
            StartupNotify=true
            Terminal=false
            Icon=google-chrome
            Type=Application
            Categories=Network;WebBrowser;' > ~/.local/share/applications/unsafe-chrome.desktop
              echo "Unsafe Chrome link installed"
            }
        files_config:
        - file: /etc/gai.conf
          content: |
            precedence  ::1/128       50
            precedence  ::/0          40
            precedence  2002::/16     30
            precedence ::/96          20
            precedence ::ffff:0:0/96  100
        - file: /etc/security/limits.d/open-files-limit.conf
          content: |
            *   soft    nofile    32768
            *   hard    nofile    65536
        - file: /etc/autofs.conf
          content: |
            logging = verbose
        - file: /etc/modules
          content: |
            # The list here shoud be generated by `sudo sensors-detect`
            # Chip drivers
            coretemp
