---
- hosts: local
  gather_facts: true
  tasks:
  - name: Clean systemd journal /var/log/journal logs
    shell:
      journalctl --vacuum-size={{ systemd_journal.max_size }} --vacuum-time={{ systemd_journal.max_duration }} --rotate
    register: journal_clean
    changed_when:
    - not(journal_clean.stderr is search('freed 0B'))
    - journal_clean.stdout
  - block:
    - name: Update apt cache
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: "{{ update_cache_timeout }}"
    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes
        force_apt_get: yes
    - name: Remove useless packages from the cache
      apt:
        autoclean: true
        force_apt_get: yes
    - name: Clean apt-get
      shell:
        apt-get clean
      args:
        warn: false
      register: apt_clean_result
      changed_when: apt_clean_result.stdout
    - name: Remove old kernels
      include_role:
        name: remove_old_kernels
    when: ansible_os_family == "Debian"
  - block:
    - name: Remove dependencies that are no longer required from RHEL based system
      yum:
        autoremove: yes
    - name: Remove useless packages from the cache from RHEL based system
      shell:
        yum clean all
      args:
        warn: false
      register: yum_result
      changed_when: '"0 files removed" not in yum_result.stdout'
    when: ansible_os_family == "RedHat"
  - name: Clean /var/log rotated logs and dist upgrade logs
    shell:
      find /var/log -type f -regex ".*\.gz$" -delete -print && \
      find /var/log -type f -regex ".*[-,\.][0-9]*$" -delete -print && \
      find /var/log -type f -regex ".*\.old$" -delete -print && \
      for i in `find /var/log/dist-upgrade -mindepth 1 -type d 2>/dev/null` ; do echo $i && rm -rf $i; done
    register: log_clean
    changed_when: log_clean.stdout
  - name: Clean all podman (root) and docker containers, images and volumes
    shell: |
      command -v podman 1>/dev/null 2>/dev/null && {
        PODMAN_PRUNE_OUTPUT="$(podman system prune --all --volumes --force |grep -v "Deleted [PCVI]")"
        if [ -n "${PODMAN_PRUNE_OUTPUT}" ]; then
          echo "${PODMAN_PRUNE_OUTPUT}"
        fi
      }
      command -v docker 1>/dev/null 2>/dev/null && {
        ITEMS=$(docker container ls --all -q)
        [ -n "${ITEMS}" ] && docker container rm ${ITEMS} --force

        DOCKER_PRUNE_OUTPUT="$(docker system prune --all --volumes --force)"
        [ "${DOCKER_PRUNE_OUTPUT}"  != "Total reclaimed space: 0B" ] && {
          echo "${DOCKER_PRUNE_OUTPUT}"
        }
      }
    register: clean_out
    changed_when: clean_out.stdout
    failed_when: false
  - name: Clean all containerd images
    shell: |
      # When minikube runs on containerd it overrding config with own, fix config to default one.
      command -v crictl 1>/dev/null 2>/dev/null && {
        CRICTL_PRUNE_OUTPUT="$(crictl rmi -a 2>&1 | grep -v 'No images to remove')"
        if [[ "${CRICTL_PRUNE_OUTPUT}" == *"unknown service"* ]]; then
          containerd config default > /etc/containerd/config.toml
          systemctl restart containerd
          while [[ "$(systemctl is-active containerd)" != "active" ]]; do
            printf "."
            sleep 1
          done
          CRICTL_PRUNE_OUTPUT="$(crictl rmi -a 2>&1 | grep -v 'No images to remove')"
        fi
        if [ -n "${CRICTL_PRUNE_OUTPUT}" ]; then
          echo "${CRICTL_PRUNE_OUTPUT}"
        fi
      }
    register: clean_out
    changed_when: clean_out.stdout
    failed_when: false
    args:
      executable: /bin/bash
  - block:
    - name: Clean all podman (user) containers, images and volumes
      shell: |
        command -v podman 1>/dev/null 2>/dev/null && {
          PODMAN_PRUNE_OUTPUT="$(podman system prune --all --volumes --force |grep -v "Deleted [PCVI]")"
          if [ -n "${PODMAN_PRUNE_OUTPUT}" ]; then
            echo "${PODMAN_PRUNE_OUTPUT}"
          fi
        }
      register: clean_out
      changed_when: clean_out.stdout
      failed_when: false
    become: false
  - block:
    - name: Clean Terraform cached plugins
      shell: |
        TERRAFORM_PLUGINS="${HOME}/.terraform.d/plugins"
        mkdir -p "${TERRAFORM_PLUGINS}"
        command -v terraform 1>/dev/null 2>/dev/null && {
          rm -rf "${TERRAFORM_PLUGINS}/*"
        }
      register: clean_out
      changed_when: clean_out.stderr
      failed_when: false
    become: false
