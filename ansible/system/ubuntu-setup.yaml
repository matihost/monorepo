---
- name: Setup Ubuntu based Desktop system
  hosts: local
  gather_facts: true
  tasks:
  - name: Ensure ~/bin is present
    become: false
    ansible.builtin.file:
      path: "{{ lookup('env', 'HOME') }}/bin"
      mode: "0775"
      state: directory
  - name: Ensure package repositories
    ansible.builtin.include_role:
      name: apt
    vars:
      apt_repo: "{{ item }}"
    loop: "{{ repositories }}"
  - name: Ensure repositroy cache is cleaned
    ansible.builtin.apt:
      clean: true
      autoclean: true
  - name: Update the repository cache
    ansible.builtin.apt:
      update_cache: yes
  - name: Ensure required packages are latest
    ansible.builtin.apt:
      name: "{{ packages }}"
      state: latest
      update_cache: false
      force_apt_get: yes

  - name: Install required snaps
    community.general.snap:
      name: "{{ snaps }}"
  - name: Install required classic snaps
    community.general.snap:
      name: "{{ item }}"
      classic: true
    loop: "{{ classic_snaps | default([]) }}"
  - name: Update snap packages
    ansible.builtin.shell: snap refresh
    register: snap_result
    ignore_errors: true
    changed_when: not (snap_result.stderr is search('All snaps up to date.'))

  - name: Install root level CLIs
    ansible.builtin.shell: "{{ item.command }}"
    register: cli_result
    changed_when: cli_result.stdout
    args:
      executable: /bin/bash
    ignore_errors: true
    loop: "{{ clis | selectattr('become', 'equalto', true) | list }}"

  - become: false
    block:
    - name: Install required Python modules in user directory
      ansible.builtin.pip:
        name: "{{ item }}"
        extra_args: --user --break-system-packages
        state: latest
      loop: "{{ pips }}"
    - name: Install user level CLIs
      ansible.builtin.shell: "{{ item.command }}"
      register: cli_result
      changed_when: cli_result.stdout
      args:
        executable: /bin/bash
      ignore_errors: true
      loop: "{{ clis | selectattr('become', 'equalto', false) | list }}"

  - name: Ensure files config is desired
    ansible.builtin.include_role:
      name: file_config
    vars:
      file_config: "{{ item }}"
    loop: "{{ files_config | default([]) }}"
