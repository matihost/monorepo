---
- hosts: localhost
  become: false
  collections:
  - kubernetes.core
  - community.general
  vars:
    files: "{{ playbook_dir }}/files"
    internal_wildcard_cn: "*.{{ ingress_gateway.default_dns_suffix }}"
    enable_external_ingress_node_pool: "{{ ingress_external_gateway.enable|default(false) and ingress_external_gateway.enable_node_selector|default(false) }}"
  tasks:
  - name: Get current GCP project
    ansible.builtin.shell: gcloud config get-value project
    register: gcp_project_out
    changed_when: false

  - name: Set GCP project fact
    ansible.builtin.set_fact:
      gcp_project: "{{ gcp_project_out.stdout }}"


  - name: Ensure istio-system namespace present
    k8s:
      name: istio-system
      api_version: v1
      kind: Namespace
      state: present

  - name: Ensure PodSecurityPolicy present for Istio CNI Daemon Set
    k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/psp.yaml.j2') }}"
      validate:
        fail_on_error: true
        strict: true
    when: lookup('pipe', 'kubectl version -o json | jq -r .serverVersion.minor') | int < 25

  - name: Ensure tcp:15017 is open on GKE nodes
    ansible.builtin.shell: |
      FIREWALL_NAME=$(gcloud compute firewall-rules list --filter="name~'{{ options.gke.cluster_name | mandatory }}-.*-master'" --format="value(name)")
      [ -z "${FIREWALL_NAME}" ] && {
        echo "Missing cluster {{ options.gke.cluster_name }} master firewall rule"
        echo "Unable to open Istio CNI port to be accessed by masters"
        echo "Either GKE has changed the firewalls or your are logged to wrong GCP project"
        exit 1
      }
      gcloud compute firewall-rules update "${FIREWALL_NAME}" --allow tcp:10250,tcp:443,tcp:15017
    when: options.gke_mode | default(false)

  - name: Run Terraform to setup GCP prerequisites for Istio deployment
    terraform:
      project_path: 'files/gke'
      state: present
      workspace: "default"
      force_init: true
      variables: "{{ options.gke | mandatory
        | combine({'project': gcp_project})
        | combine({'enable_internal_ingress_node_pool': ingress_gateway.enable_node_selector | default(false) | string | lower})
        | combine({'enable_external_ingress_node_pool': enable_external_ingress_node_pool | string | lower}) }}"
    when: options.gke_mode | default(false)

  - name: Deploy {{ istio.version }} version of istio/base chart inside istio-system namespace
    helm:
      name: "istio-base"
      chart_ref: istio/base
      chart_version: "{{ istio.version }}"
      release_namespace: "istio-system"
      wait: true
      wait_timeout: "5m0s"
      values: "{{ lookup('template', '{{ files }}/istio-base-helm-values.yaml.j2') | from_yaml }}"

  - name: Deploy {{ istio.version }} version of istio/isiod chart inside istio-system namespace
    helm:
      name: "istiod"
      chart_ref: istio/istiod
      chart_version: "{{ istio.version }}"
      release_namespace: "istio-system"
      wait: true
      wait_timeout: "5m0s"
      values: "{{ lookup('template', '{{ files }}/istiod-helm-values.yaml.j2') | from_yaml }}"

  - name: Ensure istio-ingress namespace with istio-injection present
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: istio-ingress
          labels:
            istio-injection: enabled

  - name: Deploy {{ istio.version }} version of istio/gateway chart inside istio-ingress namespace
    helm:
      name: "istio-ingressgateway"
      chart_ref: istio/gateway
      chart_version: "{{ istio.version }}"
      release_namespace: "istio-ingress"
      wait: true
      wait_timeout: "5m0s"
      values: "{{ lookup('template', '{{ files }}/istio-ingress-helm-values.yaml.j2') | from_yaml }}"

  - name: Deploy {{ istio.version }} version of istio/cni chart inside istio-ingress namespace
    helm:
      name: "istio-cni"
      chart_ref: istio/cni
      chart_version: "{{ istio.version }}"
      release_namespace: "{{ 'kube-system' if options.gke_mode | default(false) else 'istio-system' }}"
      wait: true
      wait_timeout: "5m0s"
      values: "{{ lookup('template', '{{ files }}/istio-cni-helm-values.yaml.j2') | from_yaml }}"
    when: options.gke_mode|default(cni.enable|default(true))

  - name: Ensure Istio IngressClass present
    k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/ingress_class.yaml.j2') }}"
      validate:
        fail_on_error: true
        strict: true


  - name: Ensure CN={{ internal_wildcard_cn }} TLS is present
    block:
    - name: Ensure CN={{ internal_wildcard_cn }} TLS is present
      ansible.builtin.include_role:
        name: create_certificate
      vars:
        certificate_def:
          cn: "{{ internal_wildcard_cn }}"
          tls_name: wildcard.{{ ingress_gateway.default_dns_suffix }}
    become: true
  - name: Ensure TLS Secret internal-wildcard-gateway-tls is present in namespace istio-ingress
    k8s:
      state: present
      definition:
        apiVersion: "v1"
        kind: Secret
        metadata:
          name: internal-wildcard-gateway-tls
          namespace: istio-ingress
        data:
          tls.crt: "{{ tls.crt }}"
          tls.key: "{{ tls.key }}"
        type: kubernetes.io/tls
    no_log: true

  - name: Ensure Istio internal ingress wildcard Gateway are exposed
    k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/internal_vs_config.yaml.j2') }}"
      validate:
        fail_on_error: true
        strict: true

  # - name: Set external wildcard  variables
  #   ansible.builtin.set_fact:
  #     external_wildcard_cn: "*.{{ ingress_external_gateway.default_dns_suffix }}"
  #     external_wildcard_name: "wildcard-{{ ingress_external_gateway.default_dns_suffix | replace('.','-') }}"
  #   when: ingress_external_gateway.enable | default(false)

  # - name: Ensure CN=* TLS is present
  #   block:
  #   - name: Ensure CN=* TLS is present
  #     ansible.builtin.include_role:
  #       name: create_certificate
  #     vars:
  #       certificate_def:
  #         cn: "*"
  #         tls_name: wildcard.global
  #   become: true
  #   when: ingress_external_gateway.enable|default(false)

  # - name: Ensure TLS Secret for external global wildcard gateway is present in namespace istio-system
  #   k8s:
  #     state: present
  #     definition:
  #       apiVersion: "v1"
  #       kind: Secret
  #       metadata:
  #         name: external-wildcard-gateway-tls
  #         namespace: istio-system
  #       data:
  #         tls.crt: "{{ tls.crt }}"
  #         tls.key: "{{ tls.key }}"
  #       type: kubernetes.io/tls
  #   no_log: true
  #   when: ingress_external_gateway.enable|default(false)

  # - name: Ensure Istio external ingress wildcard Gateway are exposed
  #   k8s:
  #     state: present
  #     definition: "{{ lookup('template', '{{ files }}/external_config.yaml.j2') }}"
  #     validate:
  #       fail_on_error: true
  #       strict: true
  #   when: ingress_external_gateway.enable|default(false)

  - name: Ensure VirtualServices are exposed
    ansible.builtin.include_role:
      name: expose_virtual_svc
    vars:
      wildcard_dns_suffix: "{{ ingress_gateway.default_dns_suffix }}"
      vs: "{{ item }}"
    loop: "{{ ingress_gateway.virtual_services | default([]) }}"

  - name: Ensure Istio ClusterRoles present
    k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/roles.yaml.j2') }}"
      validate:
        fail_on_error: true
        strict: true

  - name: Ensure Prometheus PodMonitoring is setup for Istio
    k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/monitoring.yaml.j2') }}"
      validate:
        fail_on_error: true
        strict: true
    when:
    - options.gke_mode|default(false)

  # - name: Ensure CN={{ external_wildcard_cn }} TLS is present
  #   block:
  #   - name: Ensure CN={{ external_wildcard_cn }} TLS is present
  #     ansible.builtin.include_role:
  #       name: create_certificate
  #     vars:
  #       certificate_def:
  #         cn: "{{ external_wildcard_cn }}"
  #         tls_name: "{{ external_wildcard_name }}"
  #   become: true
  #   when: ingress_external_gateway.enable|default(false)

  # - name: Run Terraform to setup External HTTPS LB for external Istio ingress gateway
  #   terraform:
  #     project_path: 'files/gke/external-lb'
  #     state: present
  #     workspace: "default"
  #     force_init: true
  #     variables: "{{ options.gke | mandatory
  #       | combine({'project': gcp_project})
  #       | combine({'enable_external_ingress_node_pool': enable_external_ingress_node_pool | string | lower})
  #       | combine({'external_wildcard_cn': external_wildcard_cn | default(\"\")})
  #       | combine({'external_wildcard_name': external_wildcard_name | default(\"\")})
  #       | combine({'external_wildcard_tls_key': tls.key | default(\"\") | b64decode})
  #       | combine({'external_wildcard_tls_crt': tls.crt | default(\"\") | b64decode}) }}"
  #   when:
  #   - options.gke_mode|default(false)
  #   - enable_external_ingress_node_pool
