---
- name: Check certificate_def variable
  ansible.builtin.fail:
    msg: No certificate_def with cn variable provided
  when: certificate_def is not defined or certificate_def.cn is not defined

- name: Calculate certificate file name
  ansible.builtin.set_fact:
    tls_file_name: "{{ certificate_def.tls_name | default(certificate_def.cn) }}"

- name: Check whether certificate is already created
  ansible.builtin.stat:
    path: "{{ cert_base_path }}/{{ tls_file_name }}.crt"
  register: cert_stat

- name: Ensure "{{ cert_base_path }}/{{ tls_file_name }}.crt is present
  no_log: true
  when: not(cert_stat.stat.exists is defined and cert_stat.stat.exists)
  block:
  - name: Generate an OpenSSL private key for Jenkins CN={{ certificate_def.cn }}
    community.crypto.openssl_privatekey:
      path: "{{ cert_base_path }}/{{ tls_file_name }}.pem"
      size: "{{ certificate_def.size | default(cert_size) }}"
      mode: '644'
  - name: Generate an OpenSSL Certificate Signing Request for CN={{ certificate_def.cn }}
    community.crypto.openssl_csr:
      path: "{{ cert_base_path }}/{{ tls_file_name }}.csr"
      privatekey_path: "{{ cert_base_path }}/{{ tls_file_name }}.pem"
      common_name: "{{ certificate_def.cn }}"
      mode: '644'
  - name: Generate a Self Signed OpenSSL certificate for CN={{ certificate_def.cn }}
    community.crypto.x509_certificate:
      path: "{{ cert_base_path }}/{{ tls_file_name }}.crt"
      privatekey_path: "{{ cert_base_path }}/{{ tls_file_name }}.pem"
      csr_path: "{{ cert_base_path }}/{{ tls_file_name }}.csr"
      provider: selfsigned

- name: Set tls fact
  ansible.builtin.set_fact:
    tls:
      key: "{{ lookup('file', cert_base_path + '/' + tls_file_name + '.pem') | string | b64encode }}"
      crt: "{{ lookup('file', cert_base_path + '/' + tls_file_name + '.crt') | string | b64encode }}"
  no_log: true
