#!/usr/bin/env groovy
pipeline {
  agent {
    kubernetes {
      inheritFrom "default"
      label validLabel("ansible-build-${env.BRANCH_NAME}") // subsequent builds from the same branch will reuse pods
      idleMinutes 60 // pod will be available to reuse for 1 h
      //Ensures all containers use the same user id as jnlp container to mitigate issue
      //https://github.com/jenkinsci/kubernetes-plugin#pipeline-sh-step-hangs-when-multiple-containers-are-used
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    purpose: ansible-ci
spec:
  securityContext:
    runAsUser: 1000
  containers:
  - name: ansible
    image: quay.io/matihost/ansible:latest
    command:
    - sleep
    args:
    - infinity
    volumeMounts:
    - mountPath: /home/jenkins/agent
      name: workspace-volume
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    securityContext:
      runAsUser: 0
    command:
    - /busybox/sleep
    # TODO remove env container when https://github.com/GoogleContainerTools/kaniko/issues/1542 fixed
    env:
    - name: container
      value: "docker"
    args:
    - infinity
    volumeMounts:
    - mountPath: /home/jenkins/agent
      name: workspace-volume
"""
    }
  }
  options{
    buildDiscarder(logRotator(numToKeepStr: '10'))
    timeout(time: 1, unit: 'HOURS')
    skipDefaultCheckout()  // to avoid auto checkout sources matching Jenkinsfile, if skipped pipeline needs to call: checkout scm
    skipStagesAfterUnstable()
    parallelsAlwaysFailFast()
    timestamps()
  }
  triggers {
    pollSCM('H/10 * * * 1-5')
  }
  stages {
    stage('Checkout sources') {
      steps {
        // when no tags info is required
        // checkout scm

        // checkout with tags info so that git describe is able to work
        checkout([
          $class                           : 'GitSCM',
          branches                         : scm.branches,
          doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
          extensions                       : scm.extensions + [[$class: 'CloneOption', noTags: false]],
          userRemoteConfigs                : scm.userRemoteConfigs,
        ])
      }
    }
    stage('Build') {
      parallel {
        stage('Build :: Image') {
          steps {
            container("kaniko"){
              dir("k8s/images/ansible"){
                echo "Building ${pwd()}..."
                sh """
                /kaniko/executor -f ${pwd()}/Dockerfile -c ${pwd()} --insecure --skip-tls-verify --cache=true --destination=gcr.io/${env.GCP_PROJECT}/ansible:latest
                """
              }
            }
          }
        }
        stage('Build :: Ansible') {
          steps {
            container("ansible"){
              dir("ansible/learning"){
                echo "Building ${pwd()}..."
                sh """
                  make dictionaries.yaml
                """
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Helper method to ensure label given to pod follow K8S naming rules
 */
def validLabel(String str){
  str = str.replaceAll('[^A-Za-z0-9]','-')
  if (str.length() > 63){
    str = str.substring(0, 63)
  }
  return str
}
