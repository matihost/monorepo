---
- hosts: local
  name: Deploy Jenkins to K8S
  tasks:
  - name: Check mandatory variables
    ansible.builtin.fail:
      msg: Variable {{ item }} was not provided
    when: vars[item] is undefined
    loop:
    - env

  - name: Load {{ env }} variables files
    ansible.builtin.include_vars:
      dir: "{{ inventory_dir }}/{{ env }}"
      depth: 1
      extensions:
      - yaml
      - yml

  - name: Get current GCP project
    ansible.builtin.shell: gcloud config get-value project
    register: gcp_project_out
    changed_when: false
    when: gke_mode is sameas true

  - name: Set GCP project fact
    ansible.builtin.set_fact:
      gcp_project: "{{ gcp_project_out.stdout }}"
    when: gke_mode | default(false)

  - name: Run Terraform to setup GCP prerequisites for Jenkins deployment
    community.general.terraform:
      project_path: 'files/gke'
      state: present
      workspace: "default"
      force_init: true
      variables: "{{ gke | mandatory
        | combine({'project': gcp_project}) }}"
    when: gke_mode | default(false)

  - name: Ensure Jenkins helm dependencies are in place
    kubernetes.core.k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/prerequisites.template.yaml') }}"
      # validate:
      #   fail_on_error: true
      #   strict: true

  - name: Ensure Jenkins CN={{ jenkins_ingress.host }} Secret is present
    when: jenkins_ingress.class != "istio" # assuming using existing secret present in istio-ingress namespace
    become: true
    block:
    - name: "Ensure Jenkins CN={{ jenkins_ingress.host }} is present"
      block:
      - name: "Ensure Jenkins CN={{ jenkins_ingress.host }} is present"
        ansible.builtin.include_role:
          name: create_certificate
        vars:
          certificate_def:
            cn: "{{ jenkins_ingress.host }}"
    - name: Ensure TLS Secret {{ jenkins_ingress.secretName }} is present in namespace {{ namespace }}
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: "v1"
          kind: Secret
          metadata:
            name: "{{ jenkins_ingress.secretName }}"
            namespace: "{{ namespace }}"
          data:
            tls.crt: "{{ tls.crt }}"
            tls.key: "{{ tls.key }}"
          type: kubernetes.io/tls
      no_log: true

  - name: Deploy {{ chart_version }} version of Jenkins chart inside {{ namespace }} namespace
    kubernetes.core.helm:
      name: "{{ namespace }}"
      chart_ref: jenkinsci/jenkins
      chart_version: "{{ chart_version }}"
      release_namespace: "{{ namespace }}"
      wait: true
      wait_timeout: "5m0s"
      values: "{{ lookup('template', '{{ files }}/jenkins_helm.template.yaml') | from_yaml }}"

  - name: Ensure Jenkins StatefulSet present
    kubernetes.core.k8s:
      name: "{{ namespace }}-jenkins"
      api_version: apps/v1
      kind: StatefulSet
      state: present
      namespace: "{{ namespace }}"
      wait: true
      wait_timeout: 300

  - name: Ensure Jenkins POD deployment finishes
    kubernetes.core.k8s:
      name: "{{ namespace }}-jenkins-0"
      api_version: v1
      kind: Pod
      state: present
      namespace: "{{ namespace }}"
      wait: true
      wait_timeout: 600

  - name: Ensure Prometheus PodMonitoring is setup for Jenkins
    kubernetes.core.k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/monitoring.template.yaml') }}"
      validate:
        fail_on_error: true
        strict: true
    when:
    - gke_mode | default(false)

  #  TODO  Minikube stops setting LoadBalancer address on Ingress objects
  #
  # - name: Ensure Jenkins Ingress DNS is resolvable locally
  #   ansible.builtin.shell: |
  #     while [ -z "$(kubectl get ingress {{ namespace }}-jenkins -n {{ namespace }} -o jsonpath="{.status..ip}" | xargs)"  ]; do
  #       sleep 1;
  #       echo "Awaiting for LoadBalancer for Ingress..."
  #     done
  #     INGRESS_IP=`kubectl get ingress {{ namespace }}-jenkins -n {{ namespace }} -o jsonpath="{.status..ip}"`
  #     CHANGED=`grep -c "${INGRESS_IP} {{ jenkins_ingress }}" /etc/hosts`
  #     [ "${CHANGED}" -eq 0 ] && {
  #       echo "update hosts" && sudo -E sh -c "echo \"${INGRESS_IP} {{ jenkins_ingress.host }}\" >> /etc/hosts"
  #     } || echo "hosts already present"
  #   register: hosts_result
  #   changed_when: '"update hosts" in hosts_result.stdout'
  #   when: env == "minikube"
