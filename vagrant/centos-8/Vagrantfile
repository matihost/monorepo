# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/centos-8"

  (0..4).each do |i|
    config.vm.disk :disk, size: "5GB", name: "disk-#{i}"
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: "172.28.128.3", netmask: 24, type: "dhcp"
  config.vm.network "private_network", ip: "172.30.250.3", netmask: 24, auto_config: false

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant.
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end

  config.vm.provider "virtualbox" do |vb|
    vb.cpus = 4
  end

  # Update each time VM is started
  config.vm.provision "shell", run: "always", inline: <<-SHELL
    yum -y update
  SHELL

  # Install software once (with run: "once" as default provisioner option)
  config.vm.provision "shell", inline: <<-SHELL
    # switch to CentOS 8 Stream
    #yum -y install centos-release-stream && yum update

    # install basic edit tools
    yum -y install bash-completion man-pages vim
  SHELL

  config.vm.provision "shell", run: "once", path: "scripts/system.sh"
  config.vm.provision "shell", run: "once", path: "scripts/networking.sh"
  config.vm.provision "shell", run: "once", path: "scripts/storage.sh"
  config.vm.provision "shell", run: "once", path: "scripts/nfs.sh"
  config.vm.provision "shell", run: "once", path: "scripts/httpd.sh"
  config.vm.provision "shell", run: "once", path: "scripts/containers.sh"
  config.vm.provision "shell", run: "once", path: "scripts/user-container-service.sh", privileged: false


  # Run script after boot completed
  config.trigger.after [:up] do |trigger|
    trigger.info = "Running scripts/host-ssh.sh locally..."
    trigger.run = {path: "scripts/host-ssh.sh"}
  end
end
