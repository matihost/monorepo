# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/centos-stream-9"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-Vagrant-9-20230123.0.x86_64.vagrant-virtualbox.box"

  config.vm.hostname = "centos9"

  # CentOS Stream 9 box has primary controle type IDE with a limit of up to 4 disks in total
  (0..2).each do |i|
    config.vm.disk :disk, size: "5GB", name: "disk-#{i}"
  end

  # create additional SATA controler for remaining disks
  config.vm.provider "virtualbox" do |vb|
    unless File.exist?(File.expand_path(".vagrant/centos-3.vmdk"))
      vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata", "--hostiocache", "on"]
      (3..4).each do |i|
        vb.customize ['createmedium', 'disk',
        '--filename',   ".vagrant/centos-#{i}.vmdk",
        '--size',       5 * 1024,
        '--format', "VMDK"]
      end
    end
    (3..4).each do |i|
      vb.customize ['storageattach', :id,
      '--storagectl',      "SATA",
      '--port',            i - 3,
      '--device',          "0",
      '--type',            "hdd",
      '--medium',          ".vagrant/centos-#{i}.vmdk"]
    end
  end




  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: "172.28.128.3", netmask: "255.255.255.0", type: "dhcp"
  config.vm.network "private_network", ip: "172.30.250.3", netmask: "255.255.255.0", auto_config: false

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant.
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end

  config.vm.provider "virtualbox" do |vb|
    vb.name = "centos-stream-9"
    vb.cpus = 8
    vb.memory = 5 * 1024
    vb.default_nic_type = "virtio"

    if "#{ENV['GUI']}" == "true"
      vb.gui = true
      vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
      vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
      vb.customize ["modifyvm", :id, "--vram", "128"]
    end

    if Vagrant.has_plugin?("vagrant-vbguest") then
      vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
      vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
      vb.check_guest_additions = true
      # config.vbguest.iso_path = "https://download.virtualbox.org/virtualbox/#{VBOX_VERSION}/VBoxGuestAdditions_#{VBOX_VERSION}.iso"
      config.vbguest.auto_update = true
      config.vbguest.installer_options = { allow_kernel_upgrade: true }
      # config.vbguest.installer_options = { running_kernel_modules: ["vboxguest"] }
      config.vbguest.installer_arguments = %w{--nox11 --keep}
      VBOX_VERSION="6.1.42"
      config.vbguest.installer_hooks[:before_install] = ["yum install -y epel-release policycoreutils-python-utils",
      "sed -i 's/SELINUX=.*/SELINUX=permissive/g' /etc/selinux/config",
      "setenforce Permissive",
      "sleep 1"]
      config.vbguest.installer_hooks[:before_start] = [
        "semanage fcontext -d /opt/VBoxGuestAdditions-#{VBOX_VERSION}/other/mount.vboxsf",
        "restorecon /opt/VBoxGuestAdditions-#{VBOX_VERSION}/other/mount.vboxsf",
        "echo 'vboxsf' > /etc/modules-load.d/vboxsf.conf",
        "systemctl restart systemd-modules-load.service",
        "echo '=== Verifying vboxsf module is loaded'",
        "cat /proc/modules | grep vbox"
      ]
      config.vbguest.installer_hooks[:after_install] = ["/sbin/rcvboxadd quicksetup all", "sleep 1"]
    end
    # TODO switch check_guest_additions auto_update flags when CentOS Stream 9 VB Guest works
    # if Vagrant.has_plugin?("vagrant-vbguest") then
    #   vb.check_guest_additions = false
    #   # config.vbguest.iso_path = "https://download.virtualbox.org/virtualbox/#{VBOX_VERSION}/VBoxGuestAdditions_#{VBOX_VERSION}.iso"
    #   config.vbguest.auto_update = false
    #   config.vbguest.installer_options = { allow_kernel_upgrade: true }
    #   config.vbguest.installer_arguments = %w{--nox11 --keep}
    #   config.vbguest.installer_hooks[:before_install] = ["yum install -y epel-release", "sleep 1"]
    # end
  end

  # Update each time VM is started
  config.vm.provision "shell", run: "always", inline: <<-SHELL
    yum -y update
  SHELL

  # Install software once (with run: "once" as default provisioner option)
  config.vm.provision "shell", inline: <<-SHELL
    # install basic edit tools
    yum -y install epel-release bash-completion man-pages vim
  SHELL

  config.vm.provision "shell", run: "once", path: "scripts/system.sh"
  config.vm.provision "shell", run: "once", path: "scripts/networking.sh"
  config.vm.provision "shell", run: "once", path: "scripts/storage.sh"
  config.vm.provision "shell", run: "once", path: "scripts/nfs.sh"
  config.vm.provision "shell", run: "once", path: "scripts/httpd.sh"
  config.vm.provision "shell", run: "once", path: "scripts/containers.sh"
  if "#{ENV['GUI']}" == "true"
    config.vm.provision "shell", run: "once", path: "scripts/gui.sh"
  end
  config.vm.provision "shell", run: "once", path: "scripts/user-container-service.sh", privileged: false


  # Run script after boot completed
  config.trigger.after [:up] do |trigger|
    trigger.info = "Running scripts/host-ssh.sh locally..."
    trigger.run = {path: "scripts/host-ssh.sh"}
  end
end
