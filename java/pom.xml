<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.matihost.learning</groupId>
  <artifactId>java</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <description>Various Java, Groovy, Scala Learning Apps Tools</description>

  <issueManagement>
    <url>https://github.com/matihost/monorepo/issues</url>
    <system>GitHub Issues</system>
  </issueManagement>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <scm>
    <url>https://github.com/matihost/monorepo</url>
    <connection>scm:git:git://github.com/matihost/monorepo.git</connection>
    <developerConnection>scm:git:git@github.com:matihost/monorepo.git</developerConnection>
  </scm>

  <modules>
    <module>library</module>
    <module>apps</module>
  </modules>

  <properties>
    <!-- Latest Travis CI dist:jammmy aka Ubuntu 22.03 has only openjdk17
    https://docs.travis-ci.com/user/reference/jammy/#jvm-clojure-groovy-java-scala-support
    For Travis CI, Maven build has to support passing -Djava.version=17 as well
    -->
    <java.version>21</java.version>
    <maven.compiler.release>${java.version}</maven.compiler.release>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <maven.test.skip>false</maven.test.skip>

    <!-- Spring Boot -->
    <spring.boot.version>3.1.4</spring.boot.version>

    <encoding>UTF-8</encoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- Latest Travis CI dist:jammmy aka Ubuntu 22.03 has only Maven 3.6.3
    https://docs.travis-ci.com/user/reference/jammy/#jvm-clojure-groovy-java-scala-support
    -->
    <enforce.maven.version>3.6</enforce.maven.version>

    <!-- Spock -->
    <spock.version>2.4-M1-groovy-4.0</spock.version>

    <!-- Scala 3-->
    <scala.compat.version>3</scala.compat.version>
    <scala.version>${scala.compat.version}.3.1</scala.version>
    <scala.spec2.version>5.3.2</scala.spec2.version>
    <scala.test.version>3.2.17</scala.test.version>
    <scala.test.plus.version>3.2.17.0</scala.test.plus.version>
    <!-- Scala 3 still depends on Scala 2 for backward compatibility -->
    <scala2.version>2.13.12</scala2.version>

    <!-- IBM MQ client -->
    <mq.version>9.3.3.1</mq.version>
  </properties>

  <profiles>
    <profile>
      <id>skipTests</id>
      <properties>
        <maven.test.skip>true</maven.test.skip>
      </properties>
    </profile>
    <!-- Profile enabled under VSCode-->
    <profile>
        <id>m2e</id>
        <activation>
            <property>
            <name>m2e.version</name>
            </property>
        </activation>
        <build>
            <plugins>
                <!-- workaround for https://github.com/redhat-developer/vscode-java/issues/2116 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <compilerArgs>
                            <arg>--module-version=${project.version}</arg>
                            <arg>-Xlint:unchecked</arg>
                        </compilerArgs>
                        <testExcludes>
                            <testExclude>**/module-info.java</testExclude>
                        </testExcludes>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </profile>
    <profile>
      <id>native</id>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-maven-plugin</artifactId>
              <configuration>
                <image>
                  <builder>paketobuildpacks/builder:tiny</builder>
                  <env>
                    <BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
                  </env>
                </image>
              </configuration>
              <executions>
                <execution>
                  <id>process-aot</id>
                  <goals>
                    <goal>process-aot</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
            <plugin>
              <groupId>org.graalvm.buildtools</groupId>
              <artifactId>native-maven-plugin</artifactId>
              <configuration>
                <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                <metadataRepository>
                  <enabled>true</enabled>
                </metadataRepository>
                <requiredVersion>22.3</requiredVersion>
              </configuration>
              <executions>
                <execution>
                  <id>add-reachability-metadata</id>
                  <goals>
                    <goal>add-reachability-metadata</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
  </profiles>

  <dependencies>
    <!-- JUnit 5 -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- For ParameterizedTest -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- In order to Surefire could run JUnit4 tests using JUnit 5 engine -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-migrationsupport</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Assertions, Mocks -->
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.github.git-commit-id</groupId>
        <artifactId>git-commit-id-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.sonatype.ossindex.maven</groupId>
        <artifactId>ossindex-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.basepom.maven</groupId>
        <artifactId>duplicate-finder-maven-plugin</artifactId>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.graalvm.buildtools</groupId>
          <artifactId>native-maven-plugin</artifactId>
          <version>0.9.18</version>
          <extensions>true</extensions>
        </plugin>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${spring.boot.version}</version>
          <!--
          Needed only when Spring Boot is not parent pom
          https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-include-maven-plugin
          Spring Boot creates executable jar during repackage goal
          -->
          <executions>
            <execution>
              <goals>
                <goal>repackage</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Spring Boot Actuator displays build-related information if a git.properties
          file is present at the classpath -->
        <plugin>
          <groupId>io.github.git-commit-id</groupId>
          <artifactId>git-commit-id-maven-plugin</artifactId>
          <version>6.0.0</version>
          <executions>
            <execution>
              <goals>
                <goal>revision</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <verbose>true</verbose>
            <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>
            <generateGitPropertiesFile>true</generateGitPropertiesFile>
            <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
            </generateGitPropertiesFilename>
            <failOnNoGitDirectory>false</failOnNoGitDirectory>
          </configuration>
        </plugin>

        <!-- Groovy GMaven Plus -->
        <plugin>
          <groupId>org.codehaus.gmavenplus</groupId>
          <artifactId>gmavenplus-plugin</artifactId>
          <version>3.0.2</version>
          <executions>
            <execution>
              <goals>
                <goal>addSources</goal>
                <goal>addTestSources</goal>
                <goal>generateStubs</goal>
                <goal>compile</goal>
                <goal>generateTestStubs</goal>
                <goal>compileTests</goal>
                <goal>removeStubs</goal>
                <goal>removeTestStubs</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- Scala -->
        <plugin>
          <groupId>net.alchim31.maven</groupId>
          <artifactId>scala-maven-plugin</artifactId>
          <version>4.8.1</version>
          <executions>
            <execution>
              <goals>
                <goal>compile</goal>
                <goal>testCompile</goal>
              </goals>
              <configuration>
                <scalaVersion>${scala.version}</scalaVersion>
                <scalaCompatVersion>${scala.version}</scalaCompatVersion>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- Scalatest Maven plugin requires Surefire to be turned off  in the scala project-->
        <plugin>
          <groupId>org.scalatest</groupId>
          <artifactId>scalatest-maven-plugin</artifactId>
          <version>2.2.0</version>
          <configuration>
            <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
            <junitxml>.</junitxml>
            <filereports>TestSuiteReport.txt</filereports>
            <skipTests>${maven.test.skip}</skipTests>
          </configuration>
          <executions>
            <execution>
              <id>test</id>
              <goals>
                <goal>test</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- To enforce Maven version, the prerequisites tag no works in mvn 3 https://maven.apache.org/pom.html#Prerequisites -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.3.0</version>
          <executions>
            <execution>
              <id>enforce-maven</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <dependencyConvergence/>
                  <requireJavaVersion>
                    <version>${java.version}</version>
                  </requireJavaVersion>
                  <requireMavenVersion>
                    <version>${enforce.maven.version}</version>
                  </requireMavenVersion>
                  <requireReleaseDeps>
                    <message>No Snapshots Allowed</message>
                    <failWhenParentIsSnapshot>fail</failWhenParentIsSnapshot>
                  </requireReleaseDeps>
                  <reactorModuleConvergence>
                    <message>The reactor is not valid</message>
                    <ignoreModuleDependencies>true</ignoreModuleDependencies>
                  </reactorModuleConvergence>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- Audit a project dependencies using Sonatype OSS Index https://ossindex.sonatype.org -->
        <plugin>
          <groupId>org.sonatype.ossindex.maven</groupId>
          <artifactId>ossindex-maven-plugin</artifactId>
          <version>3.2.0</version>
          <executions>
            <execution>
              <id>audit-dependencies</id>
              <phase>validate</phase>
              <goals>
                <goal>audit</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <excludeVulnerabilityIds>
              <!--
              org.yaml:snakeyaml:jar:1.33
              [CVE-2022-1471] CWE-502: Deserialization of Untrusted Data (9.8);
              https://ossindex.sonatype.org/vulnerability/CVE-2022-1471?component-type=maven&component-name=org.yaml%2Fsnakeyaml&utm_source=ossindex-client&utm_medium=integration&utm_content=1.8.1
              https://ossindex.sonatype.org/component/pkg:maven/org.yaml/snakeyaml@1.33?utm_source=ossindex-client&utm_medium=integration&utm_content=1.8.1
              -->
              <exclude>CVE-2022-1471</exclude>
              <!--
              org.bouncycastle:bcprov-jdk15to18:jar:1.72:compile;
              https://ossindex.sonatype.org/component/pkg:maven/org.bouncycastle/bcprov-jdk15to18@1.72?utm_source=ossindex-client&utm_medium=integration&utm_content=1.8.1
              [CVE-2023-33201] CWE-200: Information Exposure (6.5); https://ossindex.sonatype.org/vulnerability/CVE-2023-33201?component-type=maven&component-name=org.bouncycastle%2Fbcprov-jdk15to18&utm_source=ossindex-client&utm_medium=integration&utm_content=1.8.1
              -->
              <exclude>CVE-2023-33201</exclude>
            </excludeVulnerabilityIds>
            <reportFile>${project.build.directory}/audit-report.json</reportFile>
          </configuration>
        </plugin>

        <!-- Explicit version for Maven Apache plugin, w/o it Maven uses the minimal versions -->
        <!-- When project takes parent form Spring Boot it is not necessary -->
        <!-- Versions can be taken from  mvn -T1 versions:display-plugin-updates -->
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.11.0</version>
          <configuration>
            <!-- The -release option ensures that the code is compiled following the rules of the programming language of the specified release,
            and that generated classes target the release as well as the public API of that release.
            This means that, unlike the -source and -target options,
            the compiler will detect and generate an error when using APIs that don't exist in previous releases of Java SE. -->
            <release>${java.version}</release>
            <parameters>true</parameters>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.1.0</version>
          <configuration>
            <skipTests>${maven.test.skip}</skipTests>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.3.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.1.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>3.1.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.3.0</version>
          <configuration>
            <archive>
              <manifest>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              </manifest>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>4.0.0-M8</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jdeps-plugin</artifactId>
          <version>3.1.2</version>
          <executions>
            <execution>
              <goals>
                <goal>jdkinternals</goal>
                <goal>test-jdkinternals</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <multiRelease>9</multiRelease>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.basepom.maven</groupId>
          <artifactId>duplicate-finder-maven-plugin</artifactId>
          <version>2.0.0</version>
          <executions>
            <execution>
              <id>default</id>
              <phase>verify</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>


  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.spockframework</groupId>
        <artifactId>spock-core</artifactId>
        <version>${spock.version}</version>
        <scope>test</scope>
      </dependency>

      <!-- Scala 3-->
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala3-library_3</artifactId>
        <version>${scala.version}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala3-compiler_3</artifactId>
        <version>${scala.version}</version>
      </dependency>
      <dependency>
          <groupId>org.scala-lang</groupId>
          <artifactId>scala3-interfaces</artifactId>
          <version>${scala.version}</version>
      </dependency>

      <!-- Scala 3 still depends on Scala 2 for backward compatibility -->
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>${scala2.version}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-reflect</artifactId>
        <version>${scala2.version}</version>
      </dependency>

      <dependency>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest_${scala.compat.version}</artifactId>
        <version>${scala.test.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.scalatestplus</groupId>
        <artifactId>junit-4-13_${scala.compat.version}</artifactId>
        <version>${scala.test.plus.version}}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.specs2</groupId>
        <artifactId>specs2-core_${scala.compat.version}</artifactId>
        <version>${scala.spec2.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.specs2</groupId>
        <artifactId>specs2-junit_${scala.compat.version}</artifactId>
        <version>${scala.spec2.version}</version>
        <scope>test</scope>
      </dependency>

      <!--
      Needed only when Spring Boot is not parent pom
      https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-maven-without-a-parent

      Maven pom import takes precedence over dependency pom
      so the only way to override a dependency from Spring Boot is to mention explicitly it in dependencyManagement section
      -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- to mitigate https://github.com/spring-projects/spring-boot/issues/15967
      org.json package is defined in both org.skyscreamer:jsonassert and com.vaadin.external.google:android-json

      JPMS restricts that a package must be found in one and only one module.
      -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <version>${spring.boot.version}</version>
        <scope>test</scope>
        <exclusions>
          <exclusion>
            <groupId>com.vaadin.external.google</groupId>
            <artifactId>android-json</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>com.ibm.mq</groupId>
        <artifactId>com.ibm.mq.allclient</artifactId>
        <version>${mq.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>
